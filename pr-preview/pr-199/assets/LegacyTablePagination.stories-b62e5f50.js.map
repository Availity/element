{"version":3,"file":"LegacyTablePagination.stories-b62e5f50.js","sources":["../../../packages/table/src/lib/LegacyTablePagination.tsx"],"sourcesContent":["import { ElementType, forwardRef, useState } from 'react';\nimport {\n  Select,\n  getTablePaginationUtilityClass,\n  TablePagination as MuiTablePagination,\n  TablePaginationProps as MuiTablePaginationProps,\n  TableCellBaseProps,\n  Toolbar as MuiToolbar,\n  useThemeProps,\n  styled,\n} from '@mui/material';\n// import { useId } from '@mui/utils';\nimport { MenuItem } from '@availity/mui-menu';\nimport { Pagination, PaginationProps } from '@availity/mui-pagination';\nimport { TableCell } from '..';\n\nexport type LegacyTablePaginationProps = {\n  component?: ElementType<TableCellBaseProps>;\n  /** Props applied to the `Pagination` actions element */\n  paginationProps?: PaginationProps;\n} & Omit<\n  MuiTablePaginationProps,\n  | 'ActionsComponent'\n  | 'getItemArialabel'\n  | 'labelDisplayedRows'\n  | 'labelRowsPerPage'\n  | 'showFirstButton'\n  | 'showLastButton'\n>;\n\n// Reordering pagination required pulling slots out of MuiTablePagination component\nconst LegacyRoot = styled(TableCell, {\n  name: 'MuiTablePagination',\n  slot: 'LegacyRoot',\n  overridesResolver: (props, styles) => styles.legacyRoot,\n})({});\n\nconst LegacyToolbar = styled(MuiToolbar, {\n  name: 'MuiTablePagination',\n  slot: 'LegacyToolbar',\n  overridesResolver: (props, styles) => styles.legacyToolbar,\n})({});\n\nconst LegacyActions = styled(Pagination, {\n  name: 'MuiTablePagination',\n  slot: 'LegacyActions',\n  overridesResolver: (props, styles) => styles.legacyActions,\n})({});\n\n// const Spacer = styled('div', {\n//   name: 'MuiTablePagination',\n//   slot: 'Spacer',\n//   overridesResolver: (props, styles) => styles.spacer,\n// })({\n//   flex: '1 1 100%',\n// });\n\nconst styleOverrides = {\n  display: 'inline-flex',\n  '.MuiTablePagination-spacer': { display: 'none' },\n  '.MuiTablePagination-actions': { display: 'none' },\n  '&.MuiTablePagination-root': { all: 'unset' },\n  '.MuiTablePagination-toolbar': { all: 'unset', display: 'flex', alignItems: 'center' },\n};\n\nexport const LegacyTablePagination = forwardRef<unknown, LegacyTablePaginationProps>((props, ref) => {\n  const {\n    component,\n    count,\n    onPageChange: onPageChangeUser,\n    page: pageUser,\n    paginationProps,\n    onRowsPerPageChange: onRowsPerPageChangeUser,\n    rowsPerPageOptions,\n    rowsPerPage: rowsPerPageUser,\n    SelectProps,\n    ...rest\n  } = props;\n\n  const [page, setPage] = useState(pageUser);\n  const [rowsPerPage, setRowsPerPage] = useState(rowsPerPageUser);\n\n  const onPageChange = (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => {\n    setPage(newPage);\n    onPageChangeUser(event, newPage);\n  };\n\n  const onRowsPerPageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n    onRowsPerPageChangeUser && onRowsPerPageChangeUser(event);\n  };\n\n  return (\n    <LegacyRoot className=\"MuiTablePagination-legacyRoot\" component={component} {...rest} ref={ref}>\n      <LegacyToolbar className=\"MuiTablePagination-legacyToolbar\">\n        {count / rowsPerPage > 1 && (\n          <LegacyActions\n            className=\"MuiTablePagination-legacyActions\"\n            count={Math.ceil(count / rowsPerPage)}\n            page={page + 1}\n            onChange={(event: React.MouseEvent<HTMLButtonElement>, newPage) => {\n              onPageChange(event, newPage - 1);\n            }}\n            sx={{ display: 'inline-flex', order: 0 }}\n            boundaryCount={0}\n            siblingCount={1}\n            hidePrevButton\n            hideNextButton\n            showFirstButton\n            showLastButton\n            {...paginationProps}\n          />\n        )}\n        <MuiTablePagination\n          component=\"span\"\n          count={count}\n          onPageChange={onPageChangeUser}\n          page={page}\n          onRowsPerPageChange={onRowsPerPageChange}\n          rowsPerPageOptions={rowsPerPageOptions}\n          rowsPerPage={rowsPerPage}\n          SelectProps={SelectProps}\n          sx={styleOverrides}\n        />\n      </LegacyToolbar>\n    </LegacyRoot>\n  );\n});\n\n// 'use client';\n// import * as React from 'react';\n// import clsx from 'clsx';\n// import { chainPropTypes, integerPropType } from '@mui/utils';\n// import { unstable_composeClasses as composeClasses, isHostComponent } from '@mui/base';\n// // import useThemeProps from '../styles/useThemeProps';\n// // import InputBase from '../InputBase';\n// // import MenuItem from '../MenuItem';\n// // import Select from '../Select';\n// // import Toolbar from '../Toolbar';\n// // import useId from '../utils/useId';\n// // import tablePaginationClasses, { getTablePaginationUtilityClass } from './tablePaginationClasses';\n\n// const TablePaginationRoot = styled(TableCell, {\n//   name: 'MuiTablePagination',\n//   slot: 'Root',\n//   overridesResolver: (props, styles) => styles.root,\n// })({});\n// //   overridesResolver: (props, styles) => styles.root,\n// // })(({ theme }) => ({\n// //   overflow: 'auto',\n// //   color: (theme.vars || theme).palette.text.primary,\n// //   fontSize: theme.typography.pxToRem(14),\n// //   // Increase the specificity to override TableCell.\n// //   '&:last-child': {\n// //     padding: 0,\n// //   },\n// // }));\n\n// const TablePaginationToolbar = styled(MuiToolbar, {\n//   name: 'MuiTablePagination',\n//   slot: 'Toolbar',\n//   overridesResolver: (props, styles) => styles.toolbar,\n// })({});\n//   // overridesResolver: (props, styles) => ({\n//   //   [`& .${tablePaginationClasses.actions}`]: styles.actions,\n//   //   ...styles.toolbar,\n//   // }),\n// // })(({ theme }) => ({\n// //   minHeight: 52,\n// //   paddingRight: 2,\n// //   [`${theme.breakpoints.up('xs')} and (orientation: landscape)`]: {\n// //     minHeight: 52,\n// //   },\n// //   [theme.breakpoints.up('sm')]: {\n// //     minHeight: 52,\n// //     paddingRight: 2,\n// //   },\n// //   [`& .${tablePaginationClasses.actions}`]: {\n// //     flexShrink: 0,\n// //     marginLeft: 20,\n// //   },\n// // }));\n\n// const TablePaginationSpacer = styled('div', {\n//   name: 'MuiTablePagination',\n//   slot: 'Spacer',\n//   overridesResolver: (props, styles) => styles.spacer,\n// })({});\n// //   overridesResolver: (props, styles) => styles.spacer,\n// // })({\n// //   flex: '1 1 100%',\n// // });\n\n// const TablePaginationSelectLabel = styled('p', {\n//   name: 'MuiTablePagination',\n//   slot: 'SelectLabel',\n//   overridesResolver: (props, styles) => styles.selectLabel,\n// })({});\n// //   overridesResolver: (props, styles) => styles.selectLabel,\n// // })(({ theme }) => ({\n// //   ...theme.typography.body2,\n// //   flexShrink: 0,\n// // }));\n\n// const TablePaginationSelect = styled(Select, {\n//   name: 'MuiTablePagination',\n//   slot: 'Select',\n//   overridesResolver: (props, styles) => styles.select,\n// })({});\n// //   overridesResolver: (props, styles) => ({\n// //     [`& .${tablePaginationClasses.selectIcon}`]: styles.selectIcon,\n// //     [`& .${tablePaginationClasses.select}`]: styles.select,\n// //     ...styles.input,\n// //     ...styles.selectRoot,\n// //   }),\n// // })({\n// //   color: 'inherit',\n// //   fontSize: 'inherit',\n// //   flexShrink: 0,\n// //   marginRight: 32,\n// //   marginLeft: 8,\n// //   [`& .${tablePaginationClasses.select}`]: {\n// //     paddingLeft: 8,\n// //     paddingRight: 24,\n// //     textAlign: 'right',\n// //     textAlignLast: 'right', // Align <select> on Chrome.\n// //   },\n\n// const TablePaginationMenuItem = styled(MenuItem, {\n//   name: 'MuiTablePagination',\n//   slot: 'MenuItem',\n//   overridesResolver: (props, styles) => styles.menuItem,\n// })({});\n\n// const TablePaginationDisplayedRows = styled('p', {\n//   name: 'MuiTablePagination',\n//   slot: 'DisplayedRows',\n//   overridesResolver: (props, styles) => styles.displayedRows,\n// })({});\n// //   overridesResolver: (props, styles) => styles.displayedRows,\n// // })(({ theme }) => ({\n// //   ...theme.typography.body2,\n// //   flexShrink: 0,\n// // }));\n\n// const TablePaginationActions = styled(Pagination, {\n//   name: 'MuiTablePagination',\n//   slot: 'Actions',\n//   overridesResolver: (props, styles) => styles.actions,\n// })({});\n\n// function labelDisplayedRows({ from, to, count, page }: { from: number, to: number, count: number, page: number}) {\n//   return `${from}â€“${to} of ${count !== -1 ? count : `more than ${to}`}`;\n// }\n\n// const useUtilityClasses = (ownerState: { classes: any; }) => {\n//   const { classes } = ownerState;\n//   const slots = {\n//     root: ['root'],\n//     toolbar: ['toolbar'],\n//     spacer: ['spacer'],\n//     selectLabel: ['selectLabel'],\n//     select: ['select'],\n//     input: ['input'],\n//     selectIcon: ['selectIcon'],\n//     menuItem: ['menuItem'],\n//     displayedRows: ['displayedRows'],\n//     actions: ['actions'],\n//   };\n\n//   return composeClasses(slots, getTablePaginationUtilityClass, classes);\n// };\n\n// /**\n//  * A `TableCell` based component for placing inside `TableFooter` for pagination.\n//  */\n// const LegacyTablePagination = React.forwardRef(function TablePagination(inProps : LegacyTablePaginationProps, ref) {\n//   const props = useThemeProps({ props: inProps, name: 'MuiTablePagination' });\n//   const {\n//     className,\n//     colSpan: colSpanProp,\n//     component = TableCell,\n//     count,\n//     onPageChange,\n//     onRowsPerPageChange,\n//     page,\n//     rowsPerPage,\n//     rowsPerPageOptions = [10, 25, 50, 100],\n//     SelectProps = {},\n//     ...other\n//   } = props;\n\n//   const ownerState = props;\n//   const classes = useUtilityClasses(ownerState as any);\n\n//   const MenuItemComponent = SelectProps.native ? 'option' : TablePaginationMenuItem;\n\n//   let colSpan;\n//   if (component === TableCell || component === 'td') {\n//     colSpan = colSpanProp || 1000; // col-span over everything\n//   }\n\n//   const selectId = SelectProps.id;\n//   const labelId = SelectProps.labelId;\n\n//   const getLabelDisplayedRowsTo = () => {\n//     if (count === -1) {\n//       return (page + 1) * rowsPerPage;\n//     }\n//     return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);\n//   };\n\n//   return (\n//     <TablePaginationRoot\n//       colSpan={colSpan}\n//       ref={ref}\n//       as={component}\n//       // ownerState={ownerState as any}\n//       className={clsx(classes.root, className)}\n//       {...other}\n//     >\n//       <TablePaginationToolbar className={classes.toolbar}>\n//         <TablePaginationSpacer className={classes.spacer} />\n//         {rowsPerPageOptions.length > 1 && (\n//           <TablePaginationSelectLabel className={classes.selectLabel} id={labelId}>\n//             Rows Per Page\n//           </TablePaginationSelectLabel>\n//         )}\n\n//         {rowsPerPageOptions.length > 1 && (\n//           <TablePaginationSelect\n//             variant=\"outlined\"\n//             value={rowsPerPage}\n//             onChange={onRowsPerPageChange as any}\n//             id={selectId}\n//             labelId={labelId}\n//             {...SelectProps}\n//             classes={{\n//               ...SelectProps.classes,\n//               select: clsx(classes.select, (SelectProps.classes || {}).select),\n//               // TODO v5 remove `selectIcon`\n//               icon: clsx(classes.selectIcon, (SelectProps.classes || {}).icon),\n//             }}\n//           >\n//             {rowsPerPageOptions.map((rowsPerPageOption: any) => (\n//               <MenuItemComponent\n//                 {...(!isHostComponent(MenuItemComponent) && {\n//                   ownerState,\n//                 })}\n//                 className={classes.menuItem}\n//                 key={rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption}\n//                 value={rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption}\n//               >\n//                 {rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption}\n//               </MenuItemComponent>\n//             ))}\n//           </TablePaginationSelect>\n//         )}\n\n//         <TablePaginationDisplayedRows className={classes.displayedRows}>\n//           {labelDisplayedRows({\n//             from: count === 0 ? 0 : page * rowsPerPage + 1,\n//             to: getLabelDisplayedRowsTo(),\n//             count: count === -1 ? -1 : count,\n//             page,\n//           })}\n//         </TablePaginationDisplayedRows>\n//         <TablePaginationActions\n//           className={classes.actions}\n//           count={Math.ceil(count / rowsPerPage)}\n//           page={page+1}\n//           onChange={(event: React.MouseEvent<HTMLButtonElement>, newPage) => {\n//             onPageChange(event, newPage - 1);\n//           }}\n//           sx={{display: 'inline-flex'}}\n//           boundaryCount={0}\n//           siblingCount={1}\n//           hidePrevButton\n//           hideNextButton\n//           showFirstButton\n//           showLastButton\n//           // {...paginationProps}\n//         />\n//       </TablePaginationToolbar>\n//     </TablePaginationRoot>\n//   );\n// });\n\nexport default LegacyTablePagination;\n"],"names":["LegacyRoot","styled","TableCell","props","styles","LegacyToolbar","MuiToolbar","LegacyActions","Pagination","styleOverrides","LegacyTablePagination","forwardRef","ref","component","count","onPageChangeUser","pageUser","paginationProps","onRowsPerPageChangeUser","rowsPerPageOptions","rowsPerPageUser","SelectProps","rest","page","setPage","useState","rowsPerPage","setRowsPerPage","onPageChange","event","newPage","onRowsPerPageChange","jsx","jsxs","MuiTablePagination"],"mappings":"qxEA+BA,MAAAA,EAAAC,EAAAC,EAAA,CAAqC,KAAA,qBAC7B,KAAA,aACA,kBAAA,CAAAC,EAAAC,IAAAA,EAAA,UAER,CAAA,EAAA,CAAA,CAAA,EAEAC,EAAAJ,EAAAK,EAAA,CAAyC,KAAA,qBACjC,KAAA,gBACA,kBAAA,CAAAH,EAAAC,IAAAA,EAAA,aAER,CAAA,EAAA,CAAA,CAAA,EAEAG,GAAAN,EAAAO,EAAA,CAAyC,KAAA,qBACjC,KAAA,gBACA,kBAAA,CAAAL,EAAAC,IAAAA,EAAA,aAER,CAAA,EAAA,CAAA,CAAA,EAUAK,GAAA,CAAuB,QAAA,cACZ,6BAAA,CAAA,QAAA,MAAA,EACuC,8BAAA,CAAA,QAAA,MAAA,EACC,4BAAA,CAAA,IAAA,OAAA,EACL,8BAAA,CAAA,IAAA,QAAA,QAAA,OAAA,WAAA,QAAA,CAE9C,EAEOC,EAAAC,EAAA,WAAA,CAAAR,EAAAS,IAAA,CACL,KAAA,CAAM,UAAAC,EACJ,MAAAC,EACA,aAAAC,EACc,KAAAC,EACR,gBAAAC,EACN,oBAAAC,EACqB,mBAAAC,EACrB,YAAAC,EACa,YAAAC,EACb,GAAAC,CACG,EAAAnB,EAGL,CAAAoB,EAAAC,CAAA,EAAAC,EAAA,SAAAT,CAAA,EACA,CAAAU,EAAAC,CAAA,EAAAF,EAAA,SAAAL,CAAA,EAEAQ,EAAA,CAAAC,EAAAC,IAAA,CACEN,EAAAM,CAAA,EACAf,EAAAc,EAAAC,CAAA,CAA+B,EAGjCC,EAAAF,GAAA,CACEF,EAAA,CAAAE,EAAA,OAAA,KAAA,EACAL,EAAA,CAAA,EACAN,GAAAA,EAAAW,CAAA,CAAwD,EAG1D,OAAAG,EAAAhC,EAAA,CAAA,UAAA,gCAAA,UAAAa,EAAA,GAAAS,EAAA,IAAAV,EAAA,SAAAqB,EAAA5B,EAAA,CAAA,UAAA,mCAAA,SAAA,CAGOS,EAAAY,EAAA,GAAAM,EACCzB,GAAC,CAAA,UAAA,mCACW,MAAA,KAAA,KAAAO,EAAAY,CAAA,EAC0B,KAAAH,EAAA,EACvB,SAAA,CAAAM,EAAAC,IAAA,CAEXF,EAAAC,EAAAC,EAAA,CAAA,CAA+B,EACjC,GAAA,CAAA,QAAA,cAAA,MAAA,CAAA,EACuC,cAAA,EACxB,aAAA,EACD,eAAA,GACA,eAAA,GACA,gBAAA,GACC,eAAA,GACD,GAAAb,CACV,CAAA,EACNe,EAEFE,EAAC,CAAA,UAAA,OACW,MAAApB,EACV,aAAAC,EACc,KAAAQ,EACd,oBAAAQ,EACA,mBAAAZ,EACA,YAAAO,EACA,YAAAL,EACA,GAAAZ,EACI,CAAA,CACN,CAAA,CAAA,CAAA,CAAA,CAIR,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}