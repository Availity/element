{"version":3,"file":"Feedback.stories-fdc1c789.js","sources":["../../../packages/feedback/src/lib/FeedbackForm.tsx","../../../packages/feedback/src/lib/FeedbackHeader.tsx","../../../packages/feedback/src/lib/Feedback.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { TextField } from '@availity/mui-textfield';\nimport { LoadingButton, Button } from '@availity/mui-button';\nimport { ToggleButtonGroup, ToggleButton } from '@availity/mui-toggle-button';\nimport { Grid, SvgIconProps, ToggleButtonProps, styled } from '@mui/material';\nimport { FaceFrownIcon, FaceNeutralIcon, FaceSmileIcon } from '@availity/mui-icon';\nimport { FormLabel } from '@availity/mui-form-utils';\nimport { avRegionsApi } from '@availity/api-axios';\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\n\ninterface Inputs {\n  feedback: string;\n  smileField: string;\n}\n\ninterface SmileButtonProps extends ToggleButtonProps {\n  disabled: boolean;\n  Icon: (props: SvgIconProps) => JSX.Element;\n  label: string;\n  value: string;\n}\n\ninterface FeedbackFormProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  analytics: { info: (entries: Record<string, unknown>) => any };\n  appName: string;\n  handleClose: () => void;\n  loading: boolean;\n  sent: boolean;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setSent: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst SmileButtons = styled(ToggleButtonGroup, { name: 'AvFeedbackContainer', slot: 'SmileButtons' })({});\n\nconst FormActions = styled(Grid, { name: 'AvFeedbackContainer', slot: 'FormActions' })({});\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst SmileButton = ({ disabled, Icon, label, value, ...props }: SmileButtonProps) => (\n  <div>\n    <ToggleButton aria-label={value} value={value} {...props} disabled={disabled}>\n      <Icon fontSize=\"large\" />\n    </ToggleButton>\n  </div>\n);\n\nexport const FeedbackForm = ({\n  analytics,\n  appName,\n  handleClose,\n  loading,\n  sent,\n  setLoading,\n  setSent,\n}: FeedbackFormProps): JSX.Element | null => {\n  const {\n    control,\n    formState: { errors },\n    handleSubmit,\n    register,\n    setValue,\n    watch,\n  } = useForm<Inputs>();\n\n  const onSubmit: SubmitHandler<Inputs> = async ({ smileField, ...values }) => {\n    setLoading(true);\n    try {\n      const response = await avRegionsApi.getCurrentRegion();\n\n      await analytics.info({\n        surveyId: `${appName.replace(/\\s/g, '_')}_Smile_Survey`,\n        smileLocation: `${appName}`,\n        smile: `icon-${smileField}`,\n        url: window.location.href,\n        region: response.data.regions[0] && response.data.regions[0].id,\n        userAgent: window.navigator.userAgent,\n        submitTime: new Date(),\n        ...values, // Spread the form values onto the logger\n      });\n      setSent(true);\n      setLoading(false);\n    } catch {\n      setSent(false);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (sent) {\n      setTimeout(() => {\n        handleClose();\n      }, 2000);\n    }\n  }, [sent]);\n\n  const options = [\n    {\n      Icon: FaceSmileIcon,\n      label: 'What do you like?',\n      value: 'smile',\n    },\n    {\n      Icon: FaceNeutralIcon,\n      label: 'What would you improve?',\n      value: 'meh',\n    },\n    { Icon: FaceFrownIcon, label: \"What don't you like?\", value: 'frown' },\n  ];\n\n  const smileFieldValue = watch('smileField');\n\n  const getFeedbackLabel = () => {\n    const option = options.find((option) => option.value === smileFieldValue);\n\n    return option?.label || 'What would you improve?';\n  };\n\n  if (!sent) {\n    return (\n      <Grid\n        component=\"form\"\n        container\n        justifyContent=\"center\"\n        onSubmit={handleSubmit(onSubmit)}\n        aria-label=\"Feedback Form\"\n        aria-describedby=\"feedback-form-header\"\n      >\n        <Controller\n          control={control}\n          name=\"smileField\"\n          render={({ field }) => {\n            return (\n              <SmileButtons\n                children={options.map((props, index) => (\n                  <SmileButton autoFocus={index === 0} disabled={loading} key={props.value} {...props} />\n                ))}\n                {...field}\n                aria-labelledby=\"feedback-form-header\"\n                onChange={(event: React.MouseEvent<HTMLElement>, value: string) => {\n                  setValue(field.name, value);\n                }}\n                size=\"medium\"\n                exclusive\n              />\n            );\n          }}\n        />\n        {smileFieldValue && (\n          <TextField\n            {...register('feedback', {\n              required: 'This field is required',\n              maxLength: { value: 200, message: 'This field must not exceed 200 characters' },\n            })}\n            fullWidth\n            multiline\n            minRows={3}\n            maxRows={3}\n            label={getFeedbackLabel()}\n            inputProps={{ 'aria-required': 'true' }}\n            InputLabelProps={{\n              component: FormLabel,\n              required: true,\n            }}\n            helperText={errors.feedback?.message || 'Max 200 characters'}\n            error={!!errors.feedback}\n            disabled={loading}\n          />\n        )}\n        <FormActions container direction=\"row\" spacing={1}>\n          <Grid item>\n            <Button color=\"secondary\" disabled={loading} onClick={handleClose}>\n              Cancel\n            </Button>\n          </Grid>\n          <Grid item>\n            <LoadingButton disabled={!smileFieldValue} loading={loading} type=\"submit\" variant=\"contained\">\n              Send Feedback\n            </LoadingButton>\n          </Grid>\n        </FormActions>\n      </Grid>\n    );\n  } else {\n    return null;\n  }\n};\n","import { IconButton } from '@availity/mui-button';\nimport { CloseIcon } from '@availity/mui-icon';\nimport { Typography } from '@availity/mui-typography';\nimport { Grid, styled } from '@mui/material';\n\ninterface FeedbackHeaderProps {\n  appName: string;\n  handleClose: () => void;\n  loading: boolean;\n  sent: boolean;\n}\n\nconst FeedbackHeaderContainer = styled(Grid, { name: 'AvFeedbackContainer', slot: 'FeedbackHeaderContainer' })({});\n\nexport const FeedbackHeader = ({ appName, handleClose, loading, sent }: FeedbackHeaderProps): JSX.Element => {\n  return (\n    <FeedbackHeaderContainer\n      alignItems=\"center\"\n      container\n      direction=\"row\"\n      marginBottom={!sent ? '8px' : '0px'}\n      justifyContent=\"space-between\"\n      flexWrap=\"nowrap\"\n      id=\"feedback-form-header\"\n    >\n      <Grid item whiteSpace=\"normal\">\n        <Typography component=\"h2\" variant=\"h5\">\n          {sent ? 'Thank you for your feedback.' : `Tell us what you think about ${appName}`}\n        </Typography>\n      </Grid>\n      <Grid item marginRight=\"-8px\">\n        <IconButton disabled={loading} title=\"Close\" onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </Grid>\n    </FeedbackHeaderContainer>\n  );\n};\n","import { useState } from 'react';\nimport { Popover } from '@availity/mui-popover';\nimport { Button } from '@availity/mui-button';\nimport { Container, styled } from '@mui/material';\nimport { avLogMessagesApi } from '@availity/api-axios';\nimport { FeedbackForm } from './FeedbackForm';\nimport { FeedbackHeader } from './FeedbackHeader';\n\nexport interface FeedbackProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  analytics?: { info: (entries: any) => any };\n  appName: string;\n}\n\nconst FeedbackContainer = styled(Container, { name: 'AvFeedbackContainer', slot: 'root' })({});\n\nconst GiveFeedbackButton = styled(Button, { name: 'AvGiveFeedbackButton', slot: 'root' })({});\n\nexport const Feedback = ({ analytics = avLogMessagesApi, appName }: FeedbackProps): JSX.Element => {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [sent, setSent] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n    setSent(false);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <GiveFeedbackButton onClick={handlePopoverOpen} color=\"secondary\">\n        Give Feedback\n      </GiveFeedbackButton>\n      <Popover\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        sx={{ marginTop: '4px' }}\n        disableRestoreFocus\n        onClose={handlePopoverClose}\n        open={open}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FeedbackContainer>\n          <FeedbackHeader appName={appName} handleClose={handlePopoverClose} loading={loading} sent={sent} />\n          <FeedbackForm\n            analytics={analytics}\n            appName={appName}\n            handleClose={handlePopoverClose}\n            loading={loading}\n            sent={sent}\n            setLoading={setLoading}\n            setSent={setSent}\n          />\n        </FeedbackContainer>\n      </Popover>\n    </>\n  );\n};\n"],"names":["SmileButtons","styled","ToggleButtonGroup","FormActions","Grid","SmileButton","disabled","Icon","label","value","props","jsx","ToggleButton","FeedbackForm","analytics","appName","handleClose","loading","sent","setLoading","setSent","control","errors","handleSubmit","register","setValue","watch","useForm","onSubmit","smileField","values","response","avRegionsApi","useEffect","options","FaceSmileIcon","FaceNeutralIcon","FaceFrownIcon","smileFieldValue","getFeedbackLabel","option","option2","jsxs","Controller","field","index","event","TextField","FormLabel","_a","Button","LoadingButton","FeedbackHeaderContainer","FeedbackHeader","Typography","IconButton","CloseIcon","FeedbackContainer","Container","GiveFeedbackButton","Feedback","avLogMessagesApi","anchorEl","setAnchorEl","useState","handlePopoverOpen","handlePopoverClose","Fragment","Popover"],"mappings":"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"}