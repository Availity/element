import{j as l,a as p,F as U}from"./jsx-runtime-91a467a5.js";import{r as f,R as S}from"./index-8db94870.js";import"./react-is.production.min-a192e302.js";import{g as Y,b as k,s as H,c as R,a as P}from"./styled-bbc4db24.js";import{e as $,c as j}from"./useThemeProps-0aafcae6.js";import{T as D,c as A}from"./index-799d6194.js";import{T as c}from"./ToggleButton-6a3b2056.js";import{T as F}from"./Typography-184ba4ea.js";import"./_commonjsHelpers-042e6b4d.js";import"./extends-bab83b91.js";import"./faMagnifyingGlass-d219cdaa.js";import"./faCircleArrowRight-30157e88.js";import"./SvgIcon-ca7a5f5b.js";import"./ButtonBase-353bf105.js";import"./emotion-react.browser.esm-f47b4cc7.js";import"./setPrototypeOf-8d862a7d.js";import"./inheritsLoose-a02b825e.js";import"./useForkRef-2674f3de.js";import"./useIsFocusVisible-bbf13f29.js";import"./extendSxProp-e5ca4f7c.js";function Q(e,o){return o===void 0||e===void 0?!1:Array.isArray(o)?o.indexOf(e)>=0:e===o}function J(e){return k("MuiToggleButtonGroup",e)}const K=Y("MuiToggleButtonGroup",["root","selected","vertical","disabled","grouped","groupedHorizontal","groupedVertical"]),a=K,X=e=>{const{classes:o,orientation:r,fullWidth:s,disabled:u}=e,d={root:["root",r==="vertical"&&"vertical",s&&"fullWidth"],grouped:["grouped",`grouped${$(r)}`,u&&"disabled"]};return P(d,J,o)},Z=H("div",{name:"MuiToggleButtonGroup",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:r}=e;return[{[`& .${a.grouped}`]:o.grouped},{[`& .${a.grouped}`]:o[`grouped${$(r.orientation)}`]},o.root,r.orientation==="vertical"&&o.vertical,r.fullWidth&&o.fullWidth]}})(({ownerState:e,theme:o})=>({display:"inline-flex",borderRadius:(o.vars||o).shape.borderRadius,...e.orientation==="vertical"&&{flexDirection:"column"},...e.fullWidth&&{width:"100%"},[`& .${a.grouped}`]:{...e.orientation==="horizontal"?{"&:not(:first-of-type)":{marginLeft:-1,borderLeft:"1px solid transparent",borderTopLeftRadius:0,borderBottomLeftRadius:0},"&:not(:last-of-type)":{borderTopRightRadius:0,borderBottomRightRadius:0},[`&.${a.selected} + .${a.grouped}.${a.selected}`]:{borderLeft:0,marginLeft:0}}:{"&:not(:first-of-type)":{marginTop:-1,borderTop:"1px solid transparent",borderTopLeftRadius:0,borderTopRightRadius:0},"&:not(:last-of-type)":{borderBottomLeftRadius:0,borderBottomRightRadius:0},[`&.${a.selected} + .${a.grouped}.${a.selected}`]:{borderTop:0,marginTop:0}}}})),ee=f.forwardRef(function(o,r){const s=j({props:o,name:"MuiToggleButtonGroup"}),{children:u,className:d,color:E="standard",disabled:y=!1,exclusive:M=!1,fullWidth:b=!1,onChange:m,orientation:L="horizontal",size:B="medium",value:n,...I}=s,x={...s,disabled:y,fullWidth:b,orientation:L,size:B},C=X(x),W=(t,i)=>{if(!m)return;const w=n&&n.indexOf(i);let h;n&&w>=0?(h=n.slice(),h.splice(w,1)):h=n?n.concat(i):[i],m(t,h)},O=(t,i)=>{m&&m(t,n===i?null:i)};return l(Z,{role:"group",className:R(C.root,d),ref:r,ownerState:x,...I,children:f.Children.map(u,t=>f.isValidElement(t)?f.cloneElement(t,{className:R(C.grouped,t.props.className),onChange:M?O:W,selected:t.props.selected===void 0?Q(t.props.value,n):t.props.selected,size:t.props.size||B,fullWidth:b,color:t.props.color||E,disabled:t.props.disabled||y}):null)})}),oe=ee,g=({...e})=>l(oe,{...e});try{g.displayName="ToggleButtonGroup",g.__docgenInfo={description:"",displayName:"ToggleButtonGroup",props:{color:{defaultValue:{value:"secondary"},description:"The color of the component.",name:"color",required:!1,type:{name:'"primary" | "secondary" | "tertiary"'}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ToggleButtonGroupClasses>"}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},orientation:{defaultValue:{value:"'horizontal'"},description:"The component orientation (layout flow direction).",name:"orientation",required:!1,type:{name:'"horizontal" | "vertical"'}},onChange:{defaultValue:null,description:"Callback fired when the value changes.\n@param event The event source of the callback.\n@param value of the selected buttons. When `exclusive` is true\nthis is a single value; when false an array of selected values. If no value\nis selected and `exclusive` is true the value is null; when false an empty array.",name:"onChange",required:!1,type:{name:"(event: MouseEvent<HTMLElement, MouseEvent>, value: any) => void"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"'medium'"},description:"The size of the component.",name:"size",required:!1,type:{name:'"small" | "large" | "medium"'}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the button group will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:`The currently selected value within the group or an array of selected
values when \`exclusive\` is false.

The value must have reference equality with the option in order to be selected.`,name:"value",required:!1,type:{name:"any"}},exclusive:{defaultValue:{value:"false"},description:"If `true`, only allow one of the child ToggleButton values to be selected.",name:"exclusive",required:!1,type:{name:"boolean"}}}}}catch{}const xe={title:"Components/Button/ToggleButtonGroup",component:g,tags:["autodocs"],args:{color:"tertiary",exclusive:!0}},v={render:e=>{const[o,r]=S.useState("");return p(g,{...e,"aria-label":"Sample Toggle Button Group",value:o,onChange:(u,d)=>{r(d)},children:[l(c,{value:"one",children:"One"}),l(c,{value:"two",children:"Two"}),l(c,{value:"three",children:"Three"})]})}},T={render:()=>{const[e,o]=S.useState("");return p(U,{children:[l(F,{variant:"h3",id:"yes-no-group-label",children:"Yes/No Question"}),p(g,{"aria-labelledby":"yes-no-group-label",color:"primary",size:"small",value:e,onChange:(s,u)=>{o(u)},exclusive:!0,children:[p(c,{value:"yes",children:[l(D,{sx:{mr:1}})," Yes"]}),p(c,{value:"no",children:[l(A,{sx:{mr:1}})," No"]})]})]})}};var G,V,z;v.parameters={...v.parameters,docs:{...(G=v.parameters)==null?void 0:G.docs,source:{originalSource:`{
  render: (args: ToggleButtonGroupProps) => {
    const [value, setValue] = React.useState('');
    const handleChange = (event: React.MouseEvent<HTMLElement>, newValue: string) => {
      setValue(newValue);
    };
    return <ToggleButtonGroup {...args} aria-label="Sample Toggle Button Group" value={value} onChange={handleChange}>
        <ToggleButton value="one">One</ToggleButton>
        <ToggleButton value="two">Two</ToggleButton>
        <ToggleButton value="three">Three</ToggleButton>
      </ToggleButtonGroup>;
  }
}`,...(z=(V=v.parameters)==null?void 0:V.docs)==null?void 0:z.source}}};var _,q,N;T.parameters={...T.parameters,docs:{...(_=T.parameters)==null?void 0:_.docs,source:{originalSource:`{
  render: () => {
    const [value, setValue] = React.useState('');
    const handleChange = (event: React.MouseEvent<HTMLElement>, newValue: string) => {
      setValue(newValue);
    };
    return <>
        <Typography variant="h3" id="yes-no-group-label">
          Yes/No Question
        </Typography>
        <ToggleButtonGroup aria-labelledby="yes-no-group-label" color="primary" size="small" value={value} onChange={handleChange} exclusive>
          <ToggleButton value="yes">
            <ThumbUpIcon sx={{
            mr: 1
          }} /> Yes
          </ToggleButton>
          <ToggleButton value="no">
            <ThumbDownIcon sx={{
            mr: 1
          }} /> No
          </ToggleButton>
        </ToggleButtonGroup>
      </>;
  }
}`,...(N=(q=T.parameters)==null?void 0:q.docs)==null?void 0:N.source}}};const Ce=["_ToggleButtonGroup","_YesNo"];export{v as _ToggleButtonGroup,T as _YesNo,Ce as __namedExportsOrder,xe as default};
//# sourceMappingURL=ToggleButtonGroup.stories-ce3ef7de.js.map
