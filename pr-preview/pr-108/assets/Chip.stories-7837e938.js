import{j as r,a as S}from"./jsx-runtime-390e5fc8.js";import{r as q}from"./index-570b25c1.js";import{A as x}from"./index-42c19e6f.js";import{C as I}from"./Chip-3f4a5391.js";import{C as z}from"./Collapse-da3aacb2.js";import"./_commonjsHelpers-042e6b4d.js";import"./index-86efc5f7.js";import"./Avatar-b9c2bcdc.js";import"./createTheme-e6b56ddb.js";import"./clsx-8416b751.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-16f43d9e.js";import"./styled-188025da.js";import"./useThemeProps-db7202c2.js";import"./createSvgIcon-e4b87ef5.js";import"./SvgIcon-ab7aa383.js";import"./generateUtilityClasses-f776b170.js";import"./ButtonBase-dcf5e891.js";import"./emotion-react.browser.esm-69a15469.js";import"./TransitionGroupContext-c71596b3.js";import"./useForkRef-153a0a89.js";import"./useIsFocusVisible-5e7b1ff1.js";import"./useEnhancedEffect-460150e6.js";import"./utils-744d0bbc.js";import"./index-8a077077.js";import"./useTheme-3a36d7a0.js";const a=e=>r(I,{...e,color:"default",size:"medium"});try{a.displayName="Chip",a.__docgenInfo={description:"",displayName:"Chip",props:{color:{defaultValue:{value:"default"},description:"The color of the component. Nondefault colors are only to be used with size `small`.",name:"color",required:!1,type:{name:'"primary" | "secondary" | "error" | "info" | "success" | "warning" | "default"'}},size:{defaultValue:null,description:"The size of the component. Size `small` is for statuses and inline counters.",name:"size",required:!1,type:{name:'"small" | "medium"'}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ChipClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLDivElement>"}},label:{defaultValue:null,description:"The content of the component.",name:"label",required:!1,type:{name:"ReactNode"}},tabIndex:{defaultValue:null,description:"@ignore",name:"tabIndex",required:!1,type:{name:"number"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any>"}},avatar:{defaultValue:null,description:"The Avatar element to display.",name:"avatar",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},deleteIcon:{defaultValue:null,description:"Override the default delete icon element. Shown only if `onDelete` is set.",name:"deleteIcon",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>>"}},onDelete:{defaultValue:null,description:`Callback fired when the delete icon is clicked.
If set, the delete icon will be shown.`,name:"onDelete",required:!1,type:{name:"(event: any) => void"}}}}}catch{}const ee={title:"Components/Chip/Chip",component:a,tags:["autodocs"],args:{label:"Chip",size:"medium",color:"default"}},s={render:e=>r(a,{...e}),args:{label:"Chip"}},n={render:e=>{const[V,l]=q.useState(!0);return r(z,{in:V,children:r(a,{...e,onDelete:()=>{l(!1),setTimeout(()=>l(!0),1e3)}})})}},o={render:e=>r(a,{...e,avatar:r(x,{children:"A"})})},t={render:()=>S("div",{children:["Items ",r(a,{color:"error",label:"5",size:"small"})]})};var i,p,m;s.parameters={...s.parameters,docs:{...(i=s.parameters)==null?void 0:i.docs,source:{originalSource:`{
  render: (args: ChipProps) => <Chip {...args} />,
  args: {
    label: 'Chip'
  }
}`,...(m=(p=s.parameters)==null?void 0:p.docs)==null?void 0:m.source}}};var d,c,u;n.parameters={...n.parameters,docs:{...(d=n.parameters)==null?void 0:d.docs,source:{originalSource:`{
  render: (args: ChipProps) => {
    const [visible, setVisible] = useState(true);
    const onDelete = () => {
      setVisible(false);
      setTimeout(() => setVisible(true), 1000);
    };
    return <Collapse in={visible}>
        <Chip {...args} onDelete={onDelete} />
      </Collapse>;
  }
}`,...(u=(c=n.parameters)==null?void 0:c.docs)==null?void 0:u.source}}};var f,h,y;o.parameters={...o.parameters,docs:{...(f=o.parameters)==null?void 0:f.docs,source:{originalSource:`{
  render: (args: ChipProps) => <Chip {...args} avatar={<Avatar>A</Avatar>} />
}`,...(y=(h=o.parameters)==null?void 0:h.docs)==null?void 0:y.source}}};var C,v,g,b,_;t.parameters={...t.parameters,docs:{...(C=t.parameters)==null?void 0:C.docs,source:{originalSource:`{
  render: () => <div>
      Items <Chip color="error" label="5" size="small" />
    </div>
}`,...(g=(v=t.parameters)==null?void 0:v.docs)==null?void 0:g.source},description:{story:"Inline counter styling is achieved by using size `small`. For counters that affix to the corner of an element see `Badge`.",...(_=(b=t.parameters)==null?void 0:b.docs)==null?void 0:_.description}}};const re=["_Chip","_RemovableChip","_Avatar","_InlineCounter"];export{o as _Avatar,s as _Chip,t as _InlineCounter,n as _RemovableChip,re as __namedExportsOrder,ee as default};
//# sourceMappingURL=Chip.stories-7837e938.js.map
