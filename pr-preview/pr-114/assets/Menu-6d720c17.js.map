{"version":3,"file":"Menu-6d720c17.js","sources":["../../../node_modules/@mui/material/List/ListContext.js","../../../node_modules/@mui/material/List/listClasses.js","../../../node_modules/@mui/material/List/List.js","../../../node_modules/@mui/material/MenuList/MenuList.js","../../../node_modules/@mui/material/Popover/popoverClasses.js","../../../node_modules/@mui/material/Popover/Popover.js","../../../node_modules/@mui/material/Menu/menuClasses.js","../../../node_modules/@mui/material/Menu/Menu.js"],"sourcesContent":["import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst ListContext = /*#__PURE__*/React.createContext({});\nif (process.env.NODE_ENV !== 'production') {\n  ListContext.displayName = 'ListContext';\n}\nexport default ListContext;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListUtilityClass(slot) {\n  return generateUtilityClass('MuiList', slot);\n}\nconst listClasses = generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);\nexport default listClasses;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ListContext from './ListContext';\nimport { getListUtilityClass } from './listClasses';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePadding,\n    dense,\n    subheader\n  } = ownerState;\n  const slots = {\n    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']\n  };\n  return composeClasses(slots, getListUtilityClass, classes);\n};\nconst ListRoot = styled('ul', {\n  name: 'MuiList',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];\n  }\n})(({\n  ownerState\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  position: 'relative',\n  ...(!ownerState.disablePadding && {\n    paddingTop: 8,\n    paddingBottom: 8\n  }),\n  ...(ownerState.subheader && {\n    paddingTop: 0\n  })\n}));\nconst List = /*#__PURE__*/React.forwardRef(function List(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiList'\n  });\n  const {\n    children,\n    className,\n    component = 'ul',\n    dense = false,\n    disablePadding = false,\n    subheader,\n    ...other\n  } = props;\n  const context = React.useMemo(() => ({\n    dense\n  }), [dense]);\n  const ownerState = {\n    ...props,\n    component,\n    dense,\n    disablePadding\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: context,\n    children: /*#__PURE__*/_jsxs(ListRoot, {\n      as: component,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ownerState: ownerState,\n      ...other,\n      children: [subheader, children]\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? List.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense: PropTypes.bool,\n  /**\n   * If `true`, vertical padding is removed from the list.\n   * @default false\n   */\n  disablePadding: PropTypes.bool,\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default List;","import * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport List from '../List';\nimport getScrollbarSize from '../utils/getScrollbarSize';\nimport useForkRef from '../utils/useForkRef';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction nextItem(list, item, disableListWrap) {\n  if (list === item) {\n    return list.firstChild;\n  }\n  if (item && item.nextElementSibling) {\n    return item.nextElementSibling;\n  }\n  return disableListWrap ? null : list.firstChild;\n}\nfunction previousItem(list, item, disableListWrap) {\n  if (list === item) {\n    return disableListWrap ? list.firstChild : list.lastChild;\n  }\n  if (item && item.previousElementSibling) {\n    return item.previousElementSibling;\n  }\n  return disableListWrap ? null : list.lastChild;\n}\nfunction textCriteriaMatches(nextFocus, textCriteria) {\n  if (textCriteria === undefined) {\n    return true;\n  }\n  let text = nextFocus.innerText;\n  if (text === undefined) {\n    // jsdom doesn't support innerText\n    text = nextFocus.textContent;\n  }\n  text = text.trim().toLowerCase();\n  if (text.length === 0) {\n    return false;\n  }\n  if (textCriteria.repeating) {\n    return text[0] === textCriteria.keys[0];\n  }\n  return text.indexOf(textCriteria.keys.join('')) === 0;\n}\nfunction moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {\n  let wrappedOnce = false;\n  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);\n  while (nextFocus) {\n    // Prevent infinite loop.\n    if (nextFocus === list.firstChild) {\n      if (wrappedOnce) {\n        return false;\n      }\n      wrappedOnce = true;\n    }\n\n    // Same logic as useAutocomplete.js\n    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';\n    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {\n      // Move to the next element.\n      nextFocus = traversalFunction(list, nextFocus, disableListWrap);\n    } else {\n      nextFocus.focus();\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.\n * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n */\nconst MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    autoFocus = false,\n    autoFocusItem = false,\n    children,\n    className,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    onKeyDown,\n    variant = 'selectedMenu',\n    ...other\n  } = props;\n  const listRef = React.useRef(null);\n  const textCriteriaRef = React.useRef({\n    keys: [],\n    repeating: true,\n    previousKeyMatched: true,\n    lastTime: null\n  });\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      listRef.current.focus();\n    }\n  }, [autoFocus]);\n  React.useImperativeHandle(actions, () => ({\n    adjustStyleForScrollbar: (containerElement, theme) => {\n      // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n      const noExplicitWidth = !listRef.current.style.width;\n      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {\n        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;\n        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;\n        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;\n      }\n      return listRef.current;\n    }\n  }), []);\n  const handleKeyDown = event => {\n    const list = listRef.current;\n    const key = event.key;\n    /**\n     * @type {Element} - will always be defined since we are in a keydown handler\n     * attached to an element. A keydown event is either dispatched to the activeElement\n     * or document.body or document.documentElement. Only the first case will\n     * trigger this specific handler.\n     */\n    const currentFocus = ownerDocument(list).activeElement;\n    if (key === 'ArrowDown') {\n      // Prevent scroll of the page\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'ArrowUp') {\n      event.preventDefault();\n      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key === 'Home') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);\n    } else if (key === 'End') {\n      event.preventDefault();\n      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);\n    } else if (key.length === 1) {\n      const criteria = textCriteriaRef.current;\n      const lowerKey = key.toLowerCase();\n      const currTime = performance.now();\n      if (criteria.keys.length > 0) {\n        // Reset\n        if (currTime - criteria.lastTime > 500) {\n          criteria.keys = [];\n          criteria.repeating = true;\n          criteria.previousKeyMatched = true;\n        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {\n          criteria.repeating = false;\n        }\n      }\n      criteria.lastTime = currTime;\n      criteria.keys.push(lowerKey);\n      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);\n      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {\n        event.preventDefault();\n      } else {\n        criteria.previousKeyMatched = false;\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n  const handleRef = useForkRef(listRef, ref);\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"MUI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n    if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {\n      activeItemIndex += 1;\n      if (activeItemIndex >= children.length) {\n        // there are no focusable items within the list.\n        activeItemIndex = -1;\n      }\n    }\n  });\n  const items = React.Children.map(children, (child, index) => {\n    if (index === activeItemIndex) {\n      const newChildProps = {};\n      if (autoFocusItem) {\n        newChildProps.autoFocus = true;\n      }\n      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {\n        newChildProps.tabIndex = 0;\n      }\n      return /*#__PURE__*/React.cloneElement(child, newChildProps);\n    }\n    return child;\n  });\n  return /*#__PURE__*/_jsx(List, {\n    role: \"menu\",\n    ref: handleRef,\n    className: className,\n    onKeyDown: handleKeyDown,\n    tabIndex: autoFocus ? 0 : -1,\n    ...other,\n    children: items\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuList.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   * @default false\n   */\n  autoFocusItem: PropTypes.bool,\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the menu items will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default MenuList;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getPopoverUtilityClass(slot) {\n  return generateUtilityClass('MuiPopover', slot);\n}\nconst popoverClasses = generateUtilityClasses('MuiPopover', ['root', 'paper']);\nexport default popoverClasses;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { chainPropTypes, integerPropType, elementTypeAcceptingRef, refType, HTMLElementType } from '@mui/utils';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport debounce from '../utils/debounce';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useForkRef from '../utils/useForkRef';\nimport Grow from '../Grow';\nimport Modal from '../Modal';\nimport Paper from '../Paper';\nimport { getPopoverUtilityClass } from './popoverClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getOffsetTop(rect, vertical) {\n  let offset = 0;\n  if (typeof vertical === 'number') {\n    offset = vertical;\n  } else if (vertical === 'center') {\n    offset = rect.height / 2;\n  } else if (vertical === 'bottom') {\n    offset = rect.height;\n  }\n  return offset;\n}\nexport function getOffsetLeft(rect, horizontal) {\n  let offset = 0;\n  if (typeof horizontal === 'number') {\n    offset = horizontal;\n  } else if (horizontal === 'center') {\n    offset = rect.width / 2;\n  } else if (horizontal === 'right') {\n    offset = rect.width;\n  }\n  return offset;\n}\nfunction getTransformOriginValue(transformOrigin) {\n  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');\n}\nfunction resolveAnchorEl(anchorEl) {\n  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;\n}\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    paper: ['paper']\n  };\n  return composeClasses(slots, getPopoverUtilityClass, classes);\n};\nconst PopoverRoot = styled(Modal, {\n  name: 'MuiPopover',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst PopoverPaper = styled(Paper, {\n  name: 'MuiPopover',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})({\n  position: 'absolute',\n  overflowY: 'auto',\n  overflowX: 'hidden',\n  // So we see the popover when it's empty.\n  // It's most likely on issue on userland.\n  minWidth: 16,\n  minHeight: 16,\n  maxWidth: 'calc(100% - 32px)',\n  maxHeight: 'calc(100% - 32px)',\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0\n});\nconst Popover = /*#__PURE__*/React.forwardRef(function Popover(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiPopover'\n  });\n  const {\n    action,\n    anchorEl,\n    anchorOrigin = {\n      vertical: 'top',\n      horizontal: 'left'\n    },\n    anchorPosition,\n    anchorReference = 'anchorEl',\n    children,\n    className,\n    container: containerProp,\n    elevation = 8,\n    marginThreshold = 16,\n    open,\n    PaperProps = {},\n    transformOrigin = {\n      vertical: 'top',\n      horizontal: 'left'\n    },\n    TransitionComponent = Grow,\n    transitionDuration: transitionDurationProp = 'auto',\n    TransitionProps: {\n      onEntering,\n      ...TransitionProps\n    } = {},\n    ...other\n  } = props;\n  const paperRef = React.useRef();\n  const handlePaperRef = useForkRef(paperRef, PaperProps.ref);\n  const ownerState = {\n    ...props,\n    anchorOrigin,\n    anchorReference,\n    elevation,\n    marginThreshold,\n    PaperProps,\n    transformOrigin,\n    TransitionComponent,\n    transitionDuration: transitionDurationProp,\n    TransitionProps\n  };\n  const classes = useUtilityClasses(ownerState);\n\n  // Returns the top/left offset of the position\n  // to attach to on the anchor element (or body if none is provided)\n  const getAnchorOffset = React.useCallback(() => {\n    if (anchorReference === 'anchorPosition') {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!anchorPosition) {\n          console.error('MUI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference=\"anchorPosition\" />.');\n        }\n      }\n      return anchorPosition;\n    }\n    const resolvedAnchorEl = resolveAnchorEl(anchorEl);\n\n    // If an anchor element wasn't provided, just use the parent body element of this Popover\n    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;\n    const anchorRect = anchorElement.getBoundingClientRect();\n    if (process.env.NODE_ENV !== 'production') {\n      const box = anchorElement.getBoundingClientRect();\n      if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n        console.warn(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', \"Make sure the element is present in the document or that it's not display none.\"].join('\\n'));\n      }\n    }\n    return {\n      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),\n      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)\n    };\n  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);\n\n  // Returns the base transform origin using the element\n  const getTransformOrigin = React.useCallback(elemRect => {\n    return {\n      vertical: getOffsetTop(elemRect, transformOrigin.vertical),\n      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)\n    };\n  }, [transformOrigin.horizontal, transformOrigin.vertical]);\n  const getPositioningStyle = React.useCallback(element => {\n    const elemRect = {\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    };\n\n    // Get the transform origin point on the element itself\n    const elemTransformOrigin = getTransformOrigin(elemRect);\n    if (anchorReference === 'none') {\n      return {\n        top: null,\n        left: null,\n        transformOrigin: getTransformOriginValue(elemTransformOrigin)\n      };\n    }\n\n    // Get the offset of the anchoring element\n    const anchorOffset = getAnchorOffset();\n\n    // Calculate element positioning\n    let top = anchorOffset.top - elemTransformOrigin.vertical;\n    let left = anchorOffset.left - elemTransformOrigin.horizontal;\n    const bottom = top + elemRect.height;\n    const right = left + elemRect.width;\n\n    // Use the parent window of the anchorEl if provided\n    const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));\n\n    // Window thresholds taking required margin into account\n    const heightThreshold = containerWindow.innerHeight - marginThreshold;\n    const widthThreshold = containerWindow.innerWidth - marginThreshold;\n\n    // Check if the vertical axis needs shifting\n    if (top < marginThreshold) {\n      const diff = top - marginThreshold;\n      top -= diff;\n      elemTransformOrigin.vertical += diff;\n    } else if (bottom > heightThreshold) {\n      const diff = bottom - heightThreshold;\n      top -= diff;\n      elemTransformOrigin.vertical += diff;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {\n        console.error(['MUI: The popover component is too tall.', `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, 'Please consider adding a `max-height` to improve the user-experience.'].join('\\n'));\n      }\n    }\n\n    // Check if the horizontal axis needs shifting\n    if (left < marginThreshold) {\n      const diff = left - marginThreshold;\n      left -= diff;\n      elemTransformOrigin.horizontal += diff;\n    } else if (right > widthThreshold) {\n      const diff = right - widthThreshold;\n      left -= diff;\n      elemTransformOrigin.horizontal += diff;\n    }\n    return {\n      top: `${Math.round(top)}px`,\n      left: `${Math.round(left)}px`,\n      transformOrigin: getTransformOriginValue(elemTransformOrigin)\n    };\n  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);\n  const [isPositioned, setIsPositioned] = React.useState(open);\n  const setPositioningStyles = React.useCallback(() => {\n    const element = paperRef.current;\n    if (!element) {\n      return;\n    }\n    const positioning = getPositioningStyle(element);\n    if (positioning.top !== null) {\n      element.style.top = positioning.top;\n    }\n    if (positioning.left !== null) {\n      element.style.left = positioning.left;\n    }\n    element.style.transformOrigin = positioning.transformOrigin;\n    setIsPositioned(true);\n  }, [getPositioningStyle]);\n  const handleEntering = (element, isAppearing) => {\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n    setPositioningStyles();\n  };\n  const handleExited = () => {\n    setIsPositioned(false);\n  };\n  React.useEffect(() => {\n    if (open) {\n      setPositioningStyles();\n    }\n  });\n  React.useImperativeHandle(action, () => open ? {\n    updatePosition: () => {\n      setPositioningStyles();\n    }\n  } : null, [open, setPositioningStyles]);\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    const handleResize = debounce(() => {\n      setPositioningStyles();\n    });\n    const containerWindow = ownerWindow(anchorEl);\n    containerWindow.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      containerWindow.removeEventListener('resize', handleResize);\n    };\n  }, [anchorEl, open, setPositioningStyles]);\n  let transitionDuration = transitionDurationProp;\n  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {\n    transitionDuration = undefined;\n  }\n\n  // If the container prop is provided, use that\n  // If the anchorEl prop is provided, use its parent body element as the container\n  // If neither are provided let the Modal take care of choosing the container\n  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);\n  return /*#__PURE__*/_jsx(PopoverRoot, {\n    BackdropProps: {\n      invisible: true\n    },\n    className: clsx(classes.root, className),\n    container: container,\n    open: open,\n    ref: ref,\n    ownerState: ownerState,\n    ...other,\n    children: /*#__PURE__*/_jsx(TransitionComponent, {\n      appear: true,\n      in: open,\n      onEntering: handleEntering,\n      onExited: handleExited,\n      timeout: transitionDuration,\n      ...TransitionProps,\n      children: /*#__PURE__*/_jsx(PopoverPaper, {\n        elevation: elevation,\n        ...PaperProps,\n        ref: handlePaperRef,\n        className: clsx(classes.paper, PaperProps.className),\n        ...(isPositioned ? undefined : {\n          style: {\n            ...PaperProps.style,\n            opacity: 0\n          }\n        }),\n        ownerState: ownerState,\n        children: children\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Popover.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * A ref for imperative actions.\n   * It currently only supports updatePosition() action.\n   */\n  action: refType,\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the popover.\n   */\n  anchorEl: chainPropTypes(PropTypes.oneOfType([HTMLElementType, PropTypes.func]), props => {\n    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {\n      const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);\n      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {\n        const box = resolvedAnchorEl.getBoundingClientRect();\n        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {\n          return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', \"Make sure the element is present in the document or that it's not display none.\"].join('\\n'));\n        }\n      } else {\n        return new Error(['MUI: The `anchorEl` prop provided to the component is invalid.', `It should be an Element instance but it's \\`${resolvedAnchorEl}\\` instead.`].join('\\n'));\n      }\n    }\n    return null;\n  }),\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired\n  }),\n  /**\n   * This is the position that may be used to set the position of the popover.\n   * The coordinates are relative to the application's client area.\n   */\n  anchorPosition: PropTypes.shape({\n    left: PropTypes.number.isRequired,\n    top: PropTypes.number.isRequired\n  }),\n  /**\n   * This determines which anchor prop to refer to when setting\n   * the position of the popover.\n   * @default 'anchorEl'\n   */\n  anchorReference: PropTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * An HTML element, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   *\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * The elevation of the popover.\n   * @default 8\n   */\n  elevation: integerPropType,\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   * @default 16\n   */\n  marginThreshold: PropTypes.number,\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  transformOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOfType([PropTypes.oneOf(['center', 'left', 'right']), PropTypes.number]).isRequired,\n    vertical: PropTypes.oneOfType([PropTypes.oneOf(['bottom', 'center', 'top']), PropTypes.number]).isRequired\n  }),\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default Popover;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getMenuUtilityClass(slot) {\n  return generateUtilityClass('MuiMenu', slot);\n}\nconst menuClasses = generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);\nexport default menuClasses;","import * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { HTMLElementType } from '@mui/utils';\nimport MenuList from '../MenuList';\nimport Paper from '../Paper';\nimport Popover from '../Popover';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useTheme from '../styles/useTheme';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getMenuUtilityClass } from './menuClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nconst LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    paper: ['paper'],\n    list: ['list']\n  };\n  return composeClasses(slots, getMenuUtilityClass, classes);\n};\nconst MenuRoot = styled(Popover, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenu',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({});\nconst MenuPaper = styled(Paper, {\n  name: 'MuiMenu',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})({\n  // specZ: The maximum height of a simple menu should be one or more rows less than the view\n  // height. This ensures a tappable area outside of the simple menu with which to dismiss\n  // the menu.\n  maxHeight: 'calc(100% - 96px)',\n  // Add iOS momentum scrolling for iOS < 13.0\n  WebkitOverflowScrolling: 'touch'\n});\nconst MenuMenuList = styled(MenuList, {\n  name: 'MuiMenu',\n  slot: 'List',\n  overridesResolver: (props, styles) => styles.list\n})({\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0\n});\nconst Menu = /*#__PURE__*/React.forwardRef(function Menu(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMenu'\n  });\n  const {\n    autoFocus = true,\n    children,\n    disableAutoFocusItem = false,\n    MenuListProps = {},\n    onClose,\n    open,\n    PaperProps = {},\n    PopoverClasses,\n    transitionDuration = 'auto',\n    TransitionProps: {\n      onEntering,\n      ...TransitionProps\n    } = {},\n    variant = 'selectedMenu',\n    ...other\n  } = props;\n  const theme = useTheme();\n  const isRtl = theme.direction === 'rtl';\n  const ownerState = {\n    ...props,\n    autoFocus,\n    disableAutoFocusItem,\n    MenuListProps,\n    onEntering,\n    PaperProps,\n    transitionDuration,\n    TransitionProps,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n  const menuListActionsRef = React.useRef(null);\n  const handleEntering = (element, isAppearing) => {\n    if (menuListActionsRef.current) {\n      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);\n    }\n    if (onEntering) {\n      onEntering(element, isAppearing);\n    }\n  };\n  const handleListKeyDown = event => {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      if (onClose) {\n        onClose(event, 'tabKeyDown');\n      }\n    }\n  };\n\n  /**\n   * the index of the item should receive focus\n   * in a `variant=\"selectedMenu\"` it's the first `selected` item\n   * otherwise it's the very first item.\n   */\n  let activeItemIndex = -1;\n  // since we inject focus related props into children we have to do a lookahead\n  // to check if there is a `selected` item. We're looking for the last `selected`\n  // item and use the first valid item as a fallback\n  React.Children.map(children, (child, index) => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"MUI: The Menu component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n    if (!child.props.disabled) {\n      if (variant === 'selectedMenu' && child.props.selected) {\n        activeItemIndex = index;\n      } else if (activeItemIndex === -1) {\n        activeItemIndex = index;\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(MenuRoot, {\n    onClose: onClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: isRtl ? 'right' : 'left'\n    },\n    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,\n    PaperProps: {\n      as: MenuPaper,\n      ...PaperProps,\n      classes: {\n        ...PaperProps.classes,\n        root: classes.paper\n      }\n    },\n    className: classes.root,\n    open: open,\n    ref: ref,\n    transitionDuration: transitionDuration,\n    TransitionProps: {\n      onEntering: handleEntering,\n      ...TransitionProps\n    },\n    ownerState: ownerState,\n    ...other,\n    classes: PopoverClasses,\n    children: /*#__PURE__*/_jsx(MenuMenuList, {\n      onKeyDown: handleListKeyDown,\n      actions: menuListActionsRef,\n      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),\n      autoFocusItem: autoFocusItem,\n      variant: variant,\n      ...MenuListProps,\n      className: clsx(classes.list, MenuListProps.className),\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the menu.\n   */\n  anchorEl: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem: PropTypes.bool,\n  /**\n   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps: PropTypes.object,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes.object,\n  /**\n   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.\n   */\n  PopoverClasses: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object,\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.\n   * @default 'selectedMenu'\n   */\n  variant: PropTypes.oneOf(['menu', 'selectedMenu'])\n} : void 0;\nexport default Menu;"],"names":["ListContext","React.createContext","ListContext$1","getListUtilityClass","slot","generateUtilityClass","generateUtilityClasses","useUtilityClasses","ownerState","classes","disablePadding","dense","subheader","composeClasses","ListRoot","styled","props","styles","List","React.forwardRef","inProps","ref","useThemeProps","children","className","component","other","context","React.useMemo","_jsx","_jsxs","clsx","List$1","nextItem","list","item","disableListWrap","previousItem","textCriteriaMatches","nextFocus","textCriteria","text","moveFocus","currentFocus","disabledItemsFocusable","traversalFunction","wrappedOnce","nextFocusDisabled","MenuList","actions","autoFocus","autoFocusItem","onKeyDown","variant","listRef","React.useRef","textCriteriaRef","useEnhancedEffect","React.useImperativeHandle","containerElement","theme","noExplicitWidth","scrollbarSize","getScrollbarSize","ownerDocument","handleKeyDown","event","key","criteria","lowerKey","currTime","keepFocusOnCurrent","handleRef","useForkRef","activeItemIndex","React.Children","child","index","React.isValidElement","items","newChildProps","React.cloneElement","MuiMenuList","getPopoverUtilityClass","getOffsetTop","rect","vertical","offset","getOffsetLeft","horizontal","getTransformOriginValue","transformOrigin","n","resolveAnchorEl","anchorEl","PopoverRoot","Modal","PopoverPaper","Paper","Popover","action","anchorOrigin","anchorPosition","anchorReference","containerProp","elevation","marginThreshold","open","PaperProps","TransitionComponent","Grow","transitionDurationProp","onEntering","TransitionProps","paperRef","handlePaperRef","getAnchorOffset","React.useCallback","resolvedAnchorEl","anchorRect","getTransformOrigin","elemRect","getPositioningStyle","element","elemTransformOrigin","anchorOffset","top","left","bottom","right","containerWindow","ownerWindow","heightThreshold","widthThreshold","diff","isPositioned","setIsPositioned","React.useState","setPositioningStyles","positioning","handleEntering","isAppearing","handleExited","React.useEffect","handleResize","debounce","transitionDuration","container","Popover$1","getMenuUtilityClass","RTL_ORIGIN","LTR_ORIGIN","MenuRoot","prop","rootShouldForwardProp","MenuPaper","MenuMenuList","Menu","disableAutoFocusItem","MenuListProps","onClose","PopoverClasses","useTheme","isRtl","menuListActionsRef","handleListKeyDown","MuiMenu"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}