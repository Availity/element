{"version":3,"file":"utils-0a422cdb.js","sources":["../../../node_modules/@mui/material/FormControl/formControlState.js","../../../node_modules/@mui/material/FormControl/FormControlContext.js","../../../node_modules/@mui/material/FormControl/useFormControl.js","../../../node_modules/@mui/material/InputBase/utils.js"],"sourcesContent":["export default function formControlState({\n  props,\n  states,\n  muiFormControl\n}) {\n  return states.reduce((acc, state) => {\n    acc[state] = props[state];\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n    return acc;\n  }, {});\n}","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst FormControlContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  FormControlContext.displayName = 'FormControlContext';\n}\nexport default FormControlContext;","import * as React from 'react';\nimport FormControlContext from './FormControlContext';\nexport default function useFormControl() {\n  return React.useContext(FormControlContext);\n}","// Supports determination of isControlled().\n// Controlled input accepts its current value as a prop.\n//\n// @see https://facebook.github.io/react/docs/forms.html#controlled-components\n// @param value\n// @returns {boolean} true if string (including '') or number (including zero)\nexport function hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0);\n}\n\n// Determine if field is empty or filled.\n// Response determines if label is presented above field or as placeholder.\n//\n// @param obj\n// @param SSR\n// @returns {boolean} False when not present or empty string.\n//                    True when any number or string with length.\nexport function isFilled(obj, SSR = false) {\n  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');\n}\n\n// Determine if an Input is adorned on start.\n// It's corresponding to the left with LTR.\n//\n// @param obj\n// @returns {boolean} False when no adornments.\n//                    True when adorned at the start.\nexport function isAdornedStart(obj) {\n  return obj.startAdornment;\n}"],"names":["formControlState","props","states","muiFormControl","acc","state","FormControlContext","React.createContext","FormControlContext$1","useFormControl","React.useContext","hasValue","value","isFilled","obj","SSR","isAdornedStart"],"mappings":"wCAAe,SAASA,EAAiB,CACvC,MAAAC,EACA,OAAAC,EACA,eAAAC,CACF,EAAG,CACD,OAAOD,EAAO,OAAO,CAACE,EAAKC,KACzBD,EAAIC,CAAK,EAAIJ,EAAMI,CAAK,EACpBF,GACE,OAAOF,EAAMI,CAAK,EAAM,MAC1BD,EAAIC,CAAK,EAAIF,EAAeE,CAAK,GAG9BD,GACN,CAAE,CAAA,CACP,CCVA,MAAME,EAAkCC,EAAAA,cAAoB,MAAS,EAIrEC,EAAeF,ECNA,SAASG,GAAiB,CACvC,OAAOC,EAAAA,WAAiBJ,CAAkB,CAC5C,CCEO,SAASK,EAASC,EAAO,CAC9B,OAAOA,GAAS,MAAQ,EAAE,MAAM,QAAQA,CAAK,GAAKA,EAAM,SAAW,EACrE,CASO,SAASC,EAASC,EAAKC,EAAM,GAAO,CACzC,OAAOD,IAAQH,EAASG,EAAI,KAAK,GAAKA,EAAI,QAAU,IAAMC,GAAOJ,EAASG,EAAI,YAAY,GAAKA,EAAI,eAAiB,GACtH,CAQO,SAASE,EAAeF,EAAK,CAClC,OAAOA,EAAI,cACb","x_google_ignoreList":[0,1,2,3]}