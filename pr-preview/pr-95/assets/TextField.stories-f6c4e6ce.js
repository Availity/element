import{a as F,j as e}from"./jsx-runtime-91a467a5.js";import{r as T}from"./index-8db94870.js";import{E as q,e as I}from"./index-8950f082.js";import{I as V}from"./index-8e80667f.js";import{F as E,I as H,a as p}from"./index-cdc91575.js";import{F as C}from"./FormLabel-4402a0fa.js";import{F as L}from"./FormHelperText-4f09096a.js";import"./_commonjsHelpers-042e6b4d.js";import"./faCircleArrowRight-dbb40e32.js";import"./faMagnifyingGlass-2576db7f.js";import"./SvgIcon-c3c5be0b.js";import"./styled-657e2aa7.js";import"./useThemeProps-ad7d4b8c.js";import"./extends-bab83b91.js";import"./Button-0c87990d.js";import"./ButtonBase-6cf3e0c4.js";import"./emotion-react.browser.esm-a6af08ad.js";import"./setPrototypeOf-8d862a7d.js";import"./inheritsLoose-a02b825e.js";import"./useForkRef-2674f3de.js";import"./useIsFocusVisible-bbf13f29.js";import"./useEnhancedEffect-c45cae33.js";import"./Tooltip-20eef2a5.js";import"./useTheme-92c76a56.js";import"./ownerDocument-613eb639.js";import"./index-8ce4a492.js";import"./useSlotProps-d00a877a.js";import"./isHostComponent-73d6e646.js";import"./utils-ec691a65.js";import"./useId-fd294ee9.js";import"./IconButton-427dc05a.js";import"./LoadingButton-c81ddd00.js";import"./utils-0a422cdb.js";import"./Typography-b1d35567.js";import"./extendSxProp-1ec1a8c1.js";import"./index-9681c8ff.js";import"./Box-08ad8bbe.js";import"./FormControlLabel-77b39479.js";import"./OutlinedInput-e0105204.js";import"./ownerWindow-698471fc.js";import"./GlobalStyles-25cb3a8b.js";const r=T.forwardRef(({error:t,helperText:a,id:n,label:o,startAdornment:s,endAdornment:d,required:g,...u},v)=>{const x=`${n}-label`,m=`${n}-helper-text`;return F(C,{size:"small",children:[o&&e(E,{id:x,htmlFor:n,required:g,error:!!t,disabled:u.disabled,children:o}),e(H,{inputRef:v,id:n,"aria-describedby":m,error:!!t,startAdornment:s?e(p,{position:"start",children:s}):void 0,endAdornment:d?e(p,{position:"end",children:d}):void 0,...u}),e(L,{id:m,error:t,children:a})]})});r.displayName="TextField";try{r.displayName="TextField",r.__docgenInfo={description:"",displayName:"TextField",props:{label:{defaultValue:null,description:"The label of the `input`. It is only used for layout. The actual labelling\nis handled by `InputLabel`.",name:"label",required:!1,type:{name:"ReactNode"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},type:{defaultValue:{value:"'text'"},description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"Callback fired when the `input` is blurred.\n\nNotice that the first argument (event) might be undefined.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onInvalid:{defaultValue:null,description:"Callback fired when the `input` doesn't satisfy its constraints.",name:"onInvalid",required:!1,type:{name:"FormEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},disabled:{defaultValue:null,description:"If `true`, the component is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"disabled",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"error",required:!1,type:{name:"boolean"}},margin:{defaultValue:null,description:"If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",name:"margin",required:!1,type:{name:'"none" | "dense"'}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"unknown"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"The size of the component.",name:"size",required:!1,type:{name:'"small" | "medium"'}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"unknown"}},required:{defaultValue:null,description:"If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"required",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of the field
(not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}},renderSuffix:{defaultValue:null,description:"",name:"renderSuffix",required:!1,type:{name:'(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: "none" | "dense" | "normal"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode'}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},helperText:{defaultValue:null,description:"",name:"helperText",required:!1,type:{name:"string"}}}}}catch{}const we={title:"Components/TextField/TextField",component:r,tags:["autodocs"]},l={render:t=>e(r,{...t}),args:{label:"Field Label",id:"test"}},i={render:t=>{const[a,n]=T.useState(!1);return e(r,{...t,type:a?"text":"password",id:"password",endAdornment:e(V,{title:"password visibility toggle",onClick:()=>n(o=>!o),children:a?e(q,{}):e(I,{})})})},args:{label:"Password"}};var f,c,h;l.parameters={...l.parameters,docs:{...(f=l.parameters)==null?void 0:f.docs,source:{originalSource:`{
  render: (args: TextFieldProps) => <TextField {...args} />,
  args: {
    label: 'Field Label',
    id: 'test'
  }
}`,...(h=(c=l.parameters)==null?void 0:c.docs)==null?void 0:h.source}}};var y,b,w;i.parameters={...i.parameters,docs:{...(y=i.parameters)==null?void 0:y.docs,source:{originalSource:`{
  render: (args: TextFieldProps) => {
    const [showPassword, setShowPassword] = useState(false);
    return <TextField {...args} type={showPassword ? 'text' : 'password'} id="password" endAdornment={<IconButton title="password visibility toggle" onClick={() => setShowPassword(prev => !prev)}>
            {showPassword ? <EyeIcon /> : <EyeSlashIcon />}
          </IconButton>} />;
  },
  args: {
    label: 'Password'
  }
}`,...(w=(b=i.parameters)==null?void 0:b.docs)==null?void 0:w.source}}};const Te=["_TextField","_PasswordField"];export{i as _PasswordField,l as _TextField,Te as __namedExportsOrder,we as default};
//# sourceMappingURL=TextField.stories-f6c4e6ce.js.map
