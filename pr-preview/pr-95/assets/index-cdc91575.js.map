{"version":3,"file":"index-cdc91575.js","sources":["../../../node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js","../../../node_modules/@mui/material/InputAdornment/InputAdornment.js","../../../packages/form-utils/dist/index.mjs"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getInputAdornmentUtilityClass(slot) {\n  return generateUtilityClass('MuiInputAdornment', slot);\n}\nconst inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);\nexport default inputAdornmentClasses;","var _span;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport Typography from '../Typography';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport useFormControl from '../FormControl/useFormControl';\nimport styled from '../styles/styled';\nimport inputAdornmentClasses, { getInputAdornmentUtilityClass } from './inputAdornmentClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePointerEvents,\n    hiddenLabel,\n    position,\n    size,\n    variant\n  } = ownerState;\n  const slots = {\n    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getInputAdornmentUtilityClass, classes);\n};\nconst InputAdornmentRoot = styled('div', {\n  name: 'MuiInputAdornment',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => ({\n  display: 'flex',\n  height: '0.01em',\n  // Fix IE11 flexbox alignment. To remove at some point.\n  maxHeight: '2em',\n  alignItems: 'center',\n  whiteSpace: 'nowrap',\n  color: (theme.vars || theme).palette.action.active,\n  ...(ownerState.variant === 'filled' && {\n    // Styles applied to the root element if `variant=\"filled\"`.\n    [`&.${inputAdornmentClasses.positionStart}&:not(.${inputAdornmentClasses.hiddenLabel})`]: {\n      marginTop: 16\n    }\n  }),\n  ...(ownerState.position === 'start' && {\n    // Styles applied to the root element if `position=\"start\"`.\n    marginRight: 8\n  }),\n  ...(ownerState.position === 'end' && {\n    // Styles applied to the root element if `position=\"end\"`.\n    marginLeft: 8\n  }),\n  ...(ownerState.disablePointerEvents === true && {\n    // Styles applied to the root element if `disablePointerEvents={true}`.\n    pointerEvents: 'none'\n  })\n}));\nconst InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiInputAdornment'\n  });\n  const {\n    children,\n    className,\n    component = 'div',\n    disablePointerEvents = false,\n    disableTypography = false,\n    position,\n    variant: variantProp,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl() || {};\n  let variant = variantProp;\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('MUI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n  const ownerState = {\n    ...props,\n    hiddenLabel: muiFormControl.hiddenLabel,\n    size: muiFormControl.size,\n    disablePointerEvents,\n    position,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormControlContext.Provider, {\n    value: null,\n    children: /*#__PURE__*/_jsx(InputAdornmentRoot, {\n      as: component,\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      ref: ref,\n      ...other,\n      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/_jsx(Typography, {\n        color: \"text.secondary\",\n        children: children\n      }) : /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [position === 'start' ? /* notranslate needed while Google Translate will not fix zero-width space issue */_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"notranslate\",\n          children: \"\\u200B\"\n        })) : null, children]\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents: PropTypes.bool,\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography: PropTypes.bool,\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['end', 'start']).isRequired,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default InputAdornment;","// src/lib/FieldHelpIcon.tsx\nimport avMessages from \"@availity/message-core\";\nimport { HelpCircleIcon } from \"@availity/mui-icon\";\nimport { IconButton } from \"@availity/mui-button\";\nimport { jsx } from \"react/jsx-runtime\";\nvar triggerFieldHelp = (id) => {\n  avMessages.send({\n    event: \"nav:help:field\",\n    id\n  });\n};\nvar FieldHelpIcon = ({ helpTopicId, labelId, sx, ...rest }) => {\n  return /* @__PURE__ */ jsx(IconButton, {\n    ...rest,\n    color: \"primary\",\n    title: \"Help\",\n    role: \"link\",\n    onClick: () => triggerFieldHelp(helpTopicId),\n    \"aria-describedby\": labelId,\n    size: \"small\",\n    sx: { ...sx, padding: 0.5, fontSize: \"inherit\", marginTop: \"-2px\" },\n    children: /* @__PURE__ */ jsx(HelpCircleIcon, {\n      \"aria-hidden\": true,\n      titleAccess: void 0\n    })\n  });\n};\n\n// src/lib/FormControlLabel.tsx\nimport { forwardRef } from \"react\";\nimport {\n  Box,\n  FormControlLabel as MuiFormControlLabel\n} from \"@mui/material\";\nimport { jsx as jsx2, jsxs } from \"react/jsx-runtime\";\nvar FormControlLabel = forwardRef(({ helpTopicId, id, ...rest }, ref) => {\n  const labelId = id || (rest.htmlFor ? `${rest.htmlFor}-label` : void 0);\n  return /* @__PURE__ */ jsxs(Box, {\n    children: [\n      /* @__PURE__ */ jsx2(MuiFormControlLabel, {\n        id: labelId,\n        ...rest,\n        ref\n      }),\n      helpTopicId ? /* @__PURE__ */ jsx2(FieldHelpIcon, {\n        helpTopicId: \"12345\",\n        labelId\n      }) : null\n    ]\n  });\n});\n\n// src/lib/FormLabel.tsx\nimport { forwardRef as forwardRef2 } from \"react\";\nimport { Box as Box2, FormLabel as MuiFormLabel } from \"@mui/material\";\nimport { jsx as jsx3, jsxs as jsxs2 } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef2((props, ref) => {\n  const { children, helpTopicId, id, ...rest } = props;\n  const labelId = id || (rest.htmlFor ? `${rest.htmlFor}-label` : void 0);\n  return /* @__PURE__ */ jsxs2(Box2, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    children: [\n      /* @__PURE__ */ jsx3(MuiFormLabel, {\n        id: labelId,\n        ...rest,\n        ref,\n        children\n      }),\n      helpTopicId ? /* @__PURE__ */ jsx3(FieldHelpIcon, {\n        helpTopicId,\n        labelId,\n        sx: { px: 0.5 }\n      }) : null\n    ]\n  });\n});\n\n// src/lib/Input.tsx\nimport { OutlinedInput as MuiInput } from \"@mui/material\";\nimport { jsx as jsx4 } from \"react/jsx-runtime\";\nvar Input = (props) => {\n  return /* @__PURE__ */ jsx4(MuiInput, {\n    ...props\n  });\n};\nexport {\n  FieldHelpIcon,\n  FormControlLabel,\n  FormLabel,\n  Input,\n  triggerFieldHelp\n};\n"],"names":["getInputAdornmentUtilityClass","slot","generateUtilityClass","inputAdornmentClasses","generateUtilityClasses","inputAdornmentClasses$1","_span","overridesResolver","props","styles","ownerState","capitalize","useUtilityClasses","classes","disablePointerEvents","hiddenLabel","position","size","variant","slots","composeClasses","InputAdornmentRoot","styled","theme","InputAdornment","React.forwardRef","inProps","ref","useThemeProps","children","className","component","disableTypography","variantProp","other","muiFormControl","useFormControl","_jsx","FormControlContext","clsx","Typography","_jsxs","React.Fragment","InputAdornment$1","triggerFieldHelp","id","avMessages","FieldHelpIcon","helpTopicId","labelId","sx","rest","jsx","IconButton","HelpCircleIcon","FormControlLabel","forwardRef","jsxs","Box","jsx2","MuiFormControlLabel","FormLabel","forwardRef2","jsxs2","Box2","jsx3","MuiFormLabel","Input","jsx4","MuiInput"],"mappings":"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","x_google_ignoreList":[0,1]}