import{j as e}from"./jsx-runtime-BTJTZTIL.js";import{C as k}from"./index-B71Y1_cP.js";import{C as V,u as q,F as S}from"./index.esm-Cdw3oWqD.js";import{B as y}from"./index-DnNfvsmq.js";import{P as F}from"./index-EBwYH3Ct.js";import{T}from"./index-DSF7aQ5o.js";import{F as w,i as d}from"./index-DNupz-aR.js";import{G as I}from"./index-CQspzllj.js";import{C as j,a as O}from"./Types-FWYZLT-L.js";import{F as L}from"./FormControl-BpN01e6f.js";import{F as P}from"./FormGroup-GBcTM3pP.js";import"./index-ChsGqxH_.js";import"./index-BgYLq7fD.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./Checkbox-DDZWJ_7e.js";import"./generateUtilityClass-BeVSWKCg.js";import"./identifier-CudAVvBZ.js";import"./SwitchBase-CYtmyT40.js";import"./styled-CKuRQFSa.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./useFormControl-t_-EwZHM.js";import"./generateUtilityClasses-whvyra8-.js";import"./useControlled-DxC1uCGX.js";import"./ButtonBase-D97P5WV0.js";import"./useTimeout-iC_34LsC.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./useForkRef-Dz4aGlyk.js";import"./isFocusVisible-B8k4qzLc.js";import"./createSvgIcon-BWWwXn7v.js";import"./SvgIcon-CiBNlF9H.js";import"./memoTheme-CpoNRPWX.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./Tooltip-CIyLwlBA.js";import"./index-DyJdRKzS.js";import"./useTheme-Cx1wRXKO.js";import"./useTheme-Ib01SJ3a.js";import"./useSlot-1VRyIerd.js";import"./resolveComponentProps-CCNxqvxI.js";import"./useId-DIK8ekB4.js";import"./getReactElementRef-Df0xbma2.js";import"./Portal-C2J4q3Ji.js";import"./utils-tFrEP9Vf.js";import"./index-Bxu_udwM.js";import"./index-DdXvKv-Q.js";import"./ownerDocument-DW-IO8s5.js";import"./useSlotProps-BmqT0tgx.js";import"./IconButton-D_kG6RhR.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./Paper-4P5FqKie.js";import"./Typography-COSof5sR.js";import"./index-DfraP8LW.js";import"./extendSxProp-BY7TjwKM.js";import"./index-DJKl12U0.js";import"./index-CIzqi3uD.js";import"./faCircleArrowRight-DSzUu1Qy.js";import"./faUser-D77uLSLS.js";import"./faCheck-BUdkY9Qv.js";import"./FormLabel-BDxB3zbH.js";import"./formControlState-Dq1zat_P.js";import"./OutlinedInput-B93mfhOp.js";import"./isHostComponent-DVu5iVWx.js";import"./utils-DoM3o7-Q.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Select-BRLJ6o5z.js";import"./Menu-GaZ6ImQN.js";import"./Popover-CQBNnNRW.js";import"./Modal-CezAubrN.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./FormHelperText-DrOxEAeh.js";import"./FormControlLabel-BzV1MzKU.js";import"./Switch-BftWopts.js";import"./RadioGroup-bZEe10Dj.js";import"./Radio-I3N--tLc.js";import"./Box-Dv31mJKI.js";import"./Divider-DJW73rZ3.js";import"./dividerClasses-0g4QmK6Y.js";import"./Stack-qbqOHiMo.js";import"./styled-Dbr83ACF.js";import"./useThemeProps-Do5o_sjG.js";import"./Grid2-JMPt1-k0.js";import"./isMuiElement-DiOAsJE6.js";import"./Container-DVbvSSVb.js";const n=({name:r,disabled:t,onChange:i,onBlur:a,value:l,defaultValue:m=!1,rules:s={},shouldUnregister:c,transform:o,...x})=>e.jsx(V,{name:r,defaultValue:m,disabled:t,rules:{onChange:i,onBlur:a,value:l,shouldUnregister:c,...s},shouldUnregister:c,render:({field:u})=>{var f;return e.jsx(k,{required:typeof s.required=="object"?s.required.value:!!s.required,...x,...u,checked:((f=o==null?void 0:o.input)==null?void 0:f.call(o,u.value))??u.value,onChange:h=>{var b;return u.onChange(((b=o==null?void 0:o.output)==null?void 0:b.call(o,h.target.checked))??h.target.checked)}})}});try{n.displayName="ControlledCheckbox",n.__docgenInfo={description:"",displayName:"ControlledCheckbox",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<CheckboxClasses>"}},color:{defaultValue:null,description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).`,name:"color",required:!1,type:{name:'"primary" | "error"'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},defaultChecked:{defaultValue:null,description:"The default checked state. Use when the component is not controlled.",name:"defaultChecked",required:!1,type:{name:"boolean"}},autoFocus:{defaultValue:null,description:"",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},tabIndex:{defaultValue:null,description:"",name:"tabIndex",required:!1,type:{name:"number"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},icon:{defaultValue:{value:"<CheckBoxOutlineBlankIcon />"},description:"The icon to display when the component is unchecked.",name:"icon",required:!1,type:{name:"ReactNode"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},edge:{defaultValue:{value:"false"},description:`If given, uses a negative margin to counteract the padding on one
side (this is often helpful for aligning the left or right
side of the icon with content above or below, without ruining the border
size and shape).`,name:"edge",required:!1,type:{name:'false | "end" | "start"'}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},checked:{defaultValue:null,description:"If `true`, the component is checked.",name:"checked",required:!1,type:{name:"boolean"}},required:{defaultValue:{value:"false"},description:"If `true`, the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputHTMLAttributes<HTMLInputElement>"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<HTMLInputElement>"}},checkedIcon:{defaultValue:{value:"<CheckBoxIcon />"},description:"The icon to display when the component is checked.",name:"checkedIcon",required:!1,type:{name:"ReactNode"}},indeterminate:{defaultValue:{value:"false"},description:"If `true`, the component appears indeterminate.\nThis does not set the native input element to indeterminate due\nto inconsistent behavior across browsers.\nHowever, we set a `data-indeterminate` attribute on the `input`.",name:"indeterminate",required:!1,type:{name:"boolean"}},indeterminateIcon:{defaultValue:{value:"<IndeterminateCheckBoxIcon />"},description:"The icon to display when the component is indeterminate.",name:"indeterminateIcon",required:!1,type:{name:"ReactNode"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"(event: any) => void"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(event: any) => void"}},disabled:{defaultValue:null,description:"If the input is disabled",name:"disabled",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},name:{defaultValue:null,description:"Unique name of your input",name:"name",required:!0,type:{name:"string"}},rules:{defaultValue:{value:"{}"},description:`react-hook-form internal validation rules in the same format as [register options](https://react-hook-form.com/docs/useform/register#options), which includes:
required, min, max, minLength, maxLength, pattern, validate

Not used if 3rd party schema/resolver used.`,name:"rules",required:!1,type:{name:'Omit<RegisterOptions<FieldValues, string>, "disabled" | "setValueAs" | "valueAsNumber" | "valueAsDate">'}},shouldUnregister:{defaultValue:null,description:"Input will be unregistered after unmount and defaultValues will be removed as well.",name:"shouldUnregister",required:!1,type:{name:"boolean"}},transform:{defaultValue:null,description:"Object containing functions to parse the input value and format the output value. Useful for converting values from API responses to display values and back.\n- `input`: Function to transform the value from the underlying data to the input value.\n- `output`: Function to transform the value from the input to the underlying data.\n\nExample: The input always expects a dayjs object, but your endpoint expects and returns a string:\n`{ input: (value) => value ? dayjs(value) : null, output: (value) => value.format('YYYY-MM-DD') }`",name:"transform",required:!1,type:{name:"{ input?: (value: Output) => boolean; output?: (value: boolean) => Output; }"}}}}}catch{}const yt={title:"Form Components/Controlled Form/ControlledCheckbox",component:n,tags:["autodocs"],argTypes:{...O,...j},parameters:{controls:{exclude:["form","formAction","formEncType","formMethod","formNoValidate","formTarget","key","max","maxLength","min","minLength","pattern","style","tabIndex"]}}},p={render:r=>{var i,a,l;const t=q();return e.jsx(S,{...t,children:e.jsxs("form",{onSubmit:t.handleSubmit(m=>m),children:[e.jsxs(L,{children:[e.jsx(w,{id:"radio-group",component:"div",children:"Radio Group"}),e.jsxs(P,{children:[e.jsx(d,{label:"Option 1",control:e.jsx(n,{...r})}),e.jsx(d,{label:"Option 2",control:e.jsx(n,{name:"Option 2"})}),e.jsx(d,{label:"Option 3",control:e.jsx(n,{name:"Option 3"})})]})]}),e.jsxs(I,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[e.jsx(y,{disabled:!((i=t==null?void 0:t.formState)!=null&&i.isSubmitSuccessful),children:"Reset",color:"secondary",onClick:()=>t.reset()}),e.jsx(y,{type:"submit",disabled:(a=t==null?void 0:t.formState)==null?void 0:a.isSubmitSuccessful,children:"Submit"})]}),(l=t==null?void 0:t.formState)!=null&&l.isSubmitSuccessful?e.jsxs(F,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[e.jsx(T,{variant:"h2",children:"Submitted Values"}),e.jsx("pre",{"data-testid":"result",children:JSON.stringify(t.getValues(),null,2)})]}):null]})})},args:{name:"controlledCheckbox"}};var g,C,v;p.parameters={...p.parameters,docs:{...(g=p.parameters)==null?void 0:g.docs,source:{originalSource:`{
  render: (args: ControlledCheckboxProps) => {
    const methods = useForm();
    return <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(data => data)}>
          <FormControl>
            <FormLabel id="radio-group" component="div">
              Radio Group
            </FormLabel>
            <FormGroup>
              <FormControlLabel label="Option 1" control={<ControlledCheckbox {...args} />} />
              <FormControlLabel label="Option 2" control={<ControlledCheckbox name="Option 2" />} />
              <FormControlLabel label="Option 3" control={<ControlledCheckbox name="Option 3" />} />
            </FormGroup>
          </FormControl>
          <Grid container direction="row" justifyContent="space-between" marginTop={1}>
            <Button disabled={!methods?.formState?.isSubmitSuccessful} children="Reset" color="secondary" onClick={() => methods.reset()} />
            <Button type="submit" disabled={methods?.formState?.isSubmitSuccessful} children="Submit" />
          </Grid>
          {methods?.formState?.isSubmitSuccessful ? <Paper sx={{
          padding: '1.5rem',
          marginTop: '1.5rem'
        }}>
              <Typography variant="h2">Submitted Values</Typography>
              <pre data-testid="result">{JSON.stringify(methods.getValues(), null, 2)}</pre>
            </Paper> : null}
        </form>
      </FormProvider>;
  },
  args: {
    name: 'controlledCheckbox'
  }
}`,...(v=(C=p.parameters)==null?void 0:C.docs)==null?void 0:v.source}}};const gt=["_ControlledCheckbox"];export{p as _ControlledCheckbox,gt as __namedExportsOrder,yt as default};
