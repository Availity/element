import{j as t}from"./jsx-runtime-BTJTZTIL.js";import{r as i}from"./index-BgYLq7fD.js";import{F as d}from"./FieldHelpIcon-CaoA1T49.js";import{s as p}from"./styled-CKuRQFSa.js";import{F as u}from"./FormControlLabel-BzV1MzKU.js";import{B as m}from"./Box-Dv31mJKI.js";const c=p(m,{name:"MuiFormControlLabel",slot:"AvWrapper",overridesResolver:(e,a)=>a.avWrapper})({}),n=i.forwardRef(({helpTopicId:e,id:a,sx:r,...l},s)=>{const o=a||(l.htmlFor?`${l.htmlFor}-label`:void 0);return t.jsxs(c,{className:"MuiFormControlLabel-avWrapper",sx:r,ref:s,children:[t.jsx(u,{id:o,...l}),e?t.jsx(d,{helpTopicId:"12345",labelId:o}):null]})});try{n.displayName="FormControlLabel",n.__docgenInfo={description:"",displayName:"FormControlLabel",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormControlLabelClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},label:{defaultValue:null,description:"A text or an element to be used in an enclosing label element.",name:"label",required:!0,type:{name:"ReactNode"}},onChange:{defaultValue:null,description:"Callback fired when the state is changed.\n@param event The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",name:"onChange",required:!1,type:{name:"(event: SyntheticEvent<Element, Event>, checked: boolean) => void"}},disabled:{defaultValue:null,description:"If `true`, the control is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<FormControlLabelSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ typography?: SlotProps<OverridableComponent<TypographyTypeMap<{}, "span">>, {}, FormControlLabelProps>; }'}},name:{defaultValue:null,description:"",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the component.",name:"value",required:!1,type:{name:"unknown"}},checked:{defaultValue:null,description:"If `true`, the component appears selected.",name:"checked",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:"If `true`, adds required to control. (No required asterisk on individual controls in the group)",name:"required",required:!1,type:{name:"boolean"}},helpTopicId:{defaultValue:null,description:"Adds `FieldHelpIcon` next to the label (should not be within label for accessibility). Should only be used with `end` `labelPlacement`.",name:"helpTopicId",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},control:{defaultValue:null,description:"A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.",name:"control",required:!0,type:{name:"ReactElement<unknown, any>"}},disableTypography:{defaultValue:null,description:"If `true`, the label is rendered as it is passed without an additional typography node.",name:"disableTypography",required:!1,type:{name:"boolean"}},labelPlacement:{defaultValue:{value:"'end'"},description:"The position of the label.",name:"labelPlacement",required:!1,type:{name:'"top" | "bottom" | "end" | "start"'}}}}}catch{}export{n as F};
