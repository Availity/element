import{j as t}from"./jsx-runtime-BTJTZTIL.js";import{h as I}from"./index-DNupz-aR.js";import{C as T,u as w,F as C}from"./index.esm-Cdw3oWqD.js";import{B as h}from"./index-DnNfvsmq.js";import{P as S}from"./index-EBwYH3Ct.js";import{T as x}from"./index-DSF7aQ5o.js";import{G as F}from"./index-CQspzllj.js";import{I as j,a as E}from"./Types-FWYZLT-L.js";import"./index-ChsGqxH_.js";import"./index-DJKl12U0.js";import"./index-CIzqi3uD.js";import"./faCircleArrowRight-DSzUu1Qy.js";import"./index-BgYLq7fD.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./faUser-D77uLSLS.js";import"./SvgIcon-CiBNlF9H.js";import"./generateUtilityClass-BeVSWKCg.js";import"./identifier-CudAVvBZ.js";import"./memoTheme-CpoNRPWX.js";import"./styled-CKuRQFSa.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./generateUtilityClasses-whvyra8-.js";import"./faCheck-BUdkY9Qv.js";import"./FormLabel-BDxB3zbH.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-t_-EwZHM.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./OutlinedInput-B93mfhOp.js";import"./isHostComponent-DVu5iVWx.js";import"./index-DfraP8LW.js";import"./extendSxProp-BY7TjwKM.js";import"./useTheme-Ib01SJ3a.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./utils-DoM3o7-Q.js";import"./useForkRef-Dz4aGlyk.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./ownerWindow-HkKU3E4x.js";import"./ownerDocument-DW-IO8s5.js";import"./debounce-Be36O1Ab.js";import"./Select-BRLJ6o5z.js";import"./Menu-GaZ6ImQN.js";import"./index-DyJdRKzS.js";import"./useSlotProps-BmqT0tgx.js";import"./resolveComponentProps-CCNxqvxI.js";import"./Popover-CQBNnNRW.js";import"./useSlot-1VRyIerd.js";import"./Portal-C2J4q3Ji.js";import"./useTheme-Cx1wRXKO.js";import"./utils-tFrEP9Vf.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./index-Bxu_udwM.js";import"./index-DdXvKv-Q.js";import"./useTimeout-iC_34LsC.js";import"./getReactElementRef-Df0xbma2.js";import"./Paper-4P5FqKie.js";import"./Modal-CezAubrN.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./useControlled-DxC1uCGX.js";import"./useId-DIK8ekB4.js";import"./createSvgIcon-BWWwXn7v.js";import"./FormHelperText-DrOxEAeh.js";import"./FormControlLabel-BzV1MzKU.js";import"./Typography-COSof5sR.js";import"./Switch-BftWopts.js";import"./SwitchBase-CYtmyT40.js";import"./ButtonBase-D97P5WV0.js";import"./isFocusVisible-B8k4qzLc.js";import"./RadioGroup-bZEe10Dj.js";import"./Radio-I3N--tLc.js";import"./FormGroup-GBcTM3pP.js";import"./Box-Dv31mJKI.js";import"./Divider-DJW73rZ3.js";import"./dividerClasses-0g4QmK6Y.js";import"./Stack-qbqOHiMo.js";import"./styled-Dbr83ACF.js";import"./useThemeProps-Do5o_sjG.js";import"./Tooltip-CIyLwlBA.js";import"./IconButton-D_kG6RhR.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./Grid2-JMPt1-k0.js";import"./isMuiElement-DiOAsJE6.js";import"./Container-DVbvSSVb.js";const p=({name:o,defaultValue:e,disabled:a,onBlur:i,onChange:l,rules:r={},shouldUnregister:d,value:v,transform:n,...q})=>t.jsx(T,{name:o,defaultValue:e,disabled:a,rules:{onChange:l,onBlur:i,value:v,shouldUnregister:d,...r},shouldUnregister:d,render:({field:u,fieldState:{error:V}})=>{var m;return t.jsx(I,{required:typeof r.required=="object"?r.required.value:!!r.required,...q,...u,onChange:f=>{var c;return u.onChange(((c=n==null?void 0:n.output)==null?void 0:c.call(n,f.target.value))??f)},value:((m=n==null?void 0:n.input)==null?void 0:m.call(n,u.value))??u.value??"",error:!!V})}});try{p.displayName="ControlledInput",p.__docgenInfo={description:"",displayName:"ControlledInput",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<OutlinedInputClasses>"}},color:{defaultValue:null,description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
The prop defaults to the value (\`'primary'\`) inherited from the parent FormControl component.`,name:"color",required:!1,type:{name:'OverridableStringUnion<"primary" | "secondary" | "success" | "error" | "info" | "warning", InputBasePropsColorOverrides>'}},margin:{defaultValue:null,description:"If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",name:"margin",required:!1,type:{name:'"none" | "dense"'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},label:{defaultValue:null,description:"The label of the `input`. It is only used for layout. The actual labelling\nis handled by `InputLabel`.",name:"label",required:!1,type:{name:"ReactNode"}},defaultValue:{defaultValue:null,description:`The default value. Use when the component is not controlled.
**Important**: Can not apply undefined to defaultValue or defaultValues at useForm.
- You need to either set defaultValue at the field-level or useForm's defaultValues. undefined is not a valid value.
- If your form will invoke reset with default values, you will need to provide useForm with defaultValues.
- Calling onChange with undefined is not valid. You should use null or the empty string as your default/cleared value instead.`,name:"defaultValue",required:!1,type:{name:"any"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onInvalid:{defaultValue:null,description:"Callback fired when the `input` doesn't satisfy its constraints.",name:"onInvalid",required:!1,type:{name:"FormEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},error:{defaultValue:null,description:"If `true`, the `input` will indicate an error.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"error",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If `true`, the component is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.\nIf the input is disabled",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"The size of the component.",name:"size",required:!1,type:{name:'OverridableStringUnion<"small" | "medium", InputBasePropsSizeOverrides>'}},type:{defaultValue:{value:"'text'"},description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"string"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the `input` will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of the field
(not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"If `true`, the `input` element is required.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"required",required:!1,type:{name:"boolean"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},inputProps:{defaultValue:{value:"{}"},description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.",name:"multiline",required:!1,type:{name:"boolean"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},disableInjectingGlobalStyles:{defaultValue:{value:"false"},description:"If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.\nThis option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.",name:"disableInjectingGlobalStyles",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},inputComponent:{defaultValue:{value:"'input'"},description:"The component used for the `input` element.\nEither a string to use a HTML element or a component.",name:"inputComponent",required:!1,type:{name:"ElementType<InputBaseComponentProps, keyof IntrinsicElements>"}},renderSuffix:{defaultValue:null,description:"",name:"renderSuffix",required:!1,type:{name:'(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: "none" | "normal" | "dense"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode'}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"(event: any) => void"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(event: any) => void"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},name:{defaultValue:null,description:"Unique name of your input",name:"name",required:!0,type:{name:"string"}},rules:{defaultValue:{value:"{}"},description:`react-hook-form internal validation rules in the same format as [register options](https://react-hook-form.com/docs/useform/register#options), which includes:
required, min, max, minLength, maxLength, pattern, validate

Not used if 3rd party schema/resolver used.`,name:"rules",required:!1,type:{name:'Omit<RegisterOptions<FieldValues, string>, "disabled" | "setValueAs" | "valueAsNumber" | "valueAsDate">'}},shouldUnregister:{defaultValue:null,description:"Input will be unregistered after unmount and defaultValues will be removed as well.",name:"shouldUnregister",required:!1,type:{name:"boolean"}},transform:{defaultValue:null,description:"Object containing functions to parse the input value and format the output value. Useful for converting values from API responses to display values and back.\n- `input`: Function to transform the value from the underlying data to the input value.\n- `output`: Function to transform the value from the input to the underlying data.\n\nExample: The input always expects a dayjs object, but your endpoint expects and returns a string:\n`{ input: (value) => value ? dayjs(value) : null, output: (value) => value.format('YYYY-MM-DD') }`",name:"transform",required:!1,type:{name:"{ input?: (value: Output) => string; output?: (value: string) => Output; }"}}}}}catch{}const dt={title:"Form Components/Controlled Form/ControlledInput",component:p,tags:["autodocs"],argTypes:{...E,...j},parameters:{controls:{exclude:["className","defaultChecked","onError","ref","style","tabIndex"]}}},s={render:o=>{var a,i,l;const e=w();return t.jsx(C,{...e,children:t.jsxs("form",{onSubmit:e.handleSubmit(r=>r),children:[t.jsx(p,{...o}),t.jsxs(F,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[t.jsx(h,{disabled:!((a=e==null?void 0:e.formState)!=null&&a.isSubmitSuccessful),children:"Reset",color:"secondary",onClick:()=>e.reset()}),t.jsx(h,{type:"submit",disabled:(i=e==null?void 0:e.formState)==null?void 0:i.isSubmitSuccessful,children:"Submit"})]}),(l=e==null?void 0:e.formState)!=null&&l.isSubmitSuccessful?t.jsxs(S,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[t.jsx(x,{variant:"h2",children:"Submitted Values"}),t.jsx("pre",{"data-testid":"result",children:JSON.stringify(e.getValues(),null,2)})]}):null]})})},args:{name:"controlledInput",required:!0,rules:{required:"This is required.",maxLength:{value:10,message:"Too long"}},inputProps:{"aria-label":"Input Label"}}};var y,b,g;s.parameters={...s.parameters,docs:{...(y=s.parameters)==null?void 0:y.docs,source:{originalSource:`{
  render: (args: ControlledInputProps) => {
    const methods = useForm();
    return <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(data => data)}>
          <ControlledInput {...args} />
          <Grid container direction="row" justifyContent="space-between" marginTop={1}>
            <Button disabled={!methods?.formState?.isSubmitSuccessful} children="Reset" color="secondary" onClick={() => methods.reset()} />
            <Button type="submit" disabled={methods?.formState?.isSubmitSuccessful} children="Submit" />
          </Grid>
          {methods?.formState?.isSubmitSuccessful ? <Paper sx={{
          padding: '1.5rem',
          marginTop: '1.5rem'
        }}>
              <Typography variant="h2">Submitted Values</Typography>
              <pre data-testid="result">{JSON.stringify(methods.getValues(), null, 2)}</pre>
            </Paper> : null}
        </form>
      </FormProvider>;
  },
  args: {
    name: 'controlledInput',
    required: true,
    rules: {
      required: 'This is required.',
      maxLength: {
        value: 10,
        message: 'Too long'
      }
    },
    inputProps: {
      'aria-label': 'Input Label'
    }
  }
}`,...(g=(b=s.parameters)==null?void 0:b.docs)==null?void 0:g.source}}};const mt=["_ControlledInput"];export{s as _ControlledInput,mt as __namedExportsOrder,dt as default};
