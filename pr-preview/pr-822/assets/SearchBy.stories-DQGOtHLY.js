import{j as e}from"./jsx-runtime-BTJTZTIL.js";import{S as u}from"./index-CQspzllj.js";import{s as h}from"./styled-CKuRQFSa.js";import{F as y}from"./FormLabel-C4UB19VU.js";import{F as f}from"./FormGroup-GBcTM3pP.js";import{c as b}from"./index-CIzqi3uD.js";import{r as x}from"./index-BgYLq7fD.js";import{T as n}from"./TextField-CiyvdTXx.js";import{M as l}from"./MenuItem-BeNs4KLH.js";import{I as B}from"./InputAdornment-LPaTK-Af.js";import"./Input-COUqH-9J.js";import"./index-ChsGqxH_.js";import"./Box-Dv31mJKI.js";import"./identifier-CudAVvBZ.js";import"./generateUtilityClasses-whvyra8-.js";import"./generateUtilityClass-BeVSWKCg.js";import"./useTheme-Ib01SJ3a.js";import"./extendSxProp-BY7TjwKM.js";import"./Grid2-JMPt1-k0.js";import"./useTheme-Cx1wRXKO.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./styled-Dbr83ACF.js";import"./isMuiElement-DiOAsJE6.js";import"./useThemeProps-Do5o_sjG.js";import"./Stack-qbqOHiMo.js";import"./Container-DVbvSSVb.js";import"./FieldHelpIcon-CaoA1T49.js";import"./index-DJKl12U0.js";import"./index-DnNfvsmq.js";import"./Tooltip-CIyLwlBA.js";import"./index-DyJdRKzS.js";import"./memoTheme-CpoNRPWX.js";import"./useSlot-1VRyIerd.js";import"./resolveComponentProps-CCNxqvxI.js";import"./useForkRef-Dz4aGlyk.js";import"./useTimeout-iC_34LsC.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./useControlled-DxC1uCGX.js";import"./useId-DIK8ekB4.js";import"./getReactElementRef-Df0xbma2.js";import"./Portal-C2J4q3Ji.js";import"./utils-tFrEP9Vf.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./index-Bxu_udwM.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./index-DdXvKv-Q.js";import"./ownerDocument-DW-IO8s5.js";import"./useSlotProps-BmqT0tgx.js";import"./isFocusVisible-B8k4qzLc.js";import"./IconButton-D_kG6RhR.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./ButtonBase-D97P5WV0.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./FormLabel-BDxB3zbH.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-t_-EwZHM.js";import"./faCircleArrowRight-DSzUu1Qy.js";import"./faUser-D77uLSLS.js";import"./SvgIcon-CiBNlF9H.js";import"./OutlinedInput-B93mfhOp.js";import"./isHostComponent-DVu5iVWx.js";import"./index-DfraP8LW.js";import"./utils-DoM3o7-Q.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Select-BRLJ6o5z.js";import"./Menu-GaZ6ImQN.js";import"./Popover-CQBNnNRW.js";import"./Paper-4P5FqKie.js";import"./Modal-CezAubrN.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./createSvgIcon-BWWwXn7v.js";import"./FormHelperText-DrOxEAeh.js";import"./FormControl-BpN01e6f.js";import"./listItemIconClasses-Cex_GvQn.js";import"./listItemTextClasses-CumCrahA.js";import"./dividerClasses-0g4QmK6Y.js";import"./Typography-COSof5sR.js";const m=h(f,{name:"AvSearchBy",slot:"root",overridesResolver:(r,t)=>t.root})(()=>({".MuiAutocomplete-root, .MuiAutocomplete-fullWidth":{width:"auto"},".MuiFormControl-fullWidth":{flex:1},"> .MuiStack-root":{display:"flex",flexWrap:"wrap","> .MuiFormControl-root":{minWidth:"10rem"}},"& :is(.MuiFormControl-root, .MuiAutocomplete-root):not(:is(.MuiFormControl-root, .MuiAutocomplete-root):first-of-type)":{".MuiInputBase-root":{borderBottomLeftRadius:0,borderTopLeftRadius:0}},"& :is(.MuiFormControl-root, .MuiAutocomplete-root):not(:is(.MuiFormControl-root, .MuiAutocomplete-root):last-of-type)":{".MuiInputBase-root":{borderBottomRightRadius:0,borderTopRightRadius:0,marginRight:"-1px"}}})),a=({children:r,searchById:t,searchByLabel:i="Search By",...s})=>e.jsxs(m,{...s,children:[e.jsx(y,{htmlFor:t,children:i}),e.jsx(u,{direction:"row",children:r})]});try{m.displayName="SearchByContainer",m.__docgenInfo={description:"",displayName:"SearchByContainer",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormGroupClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},row:{defaultValue:{value:"false"},description:"Display group of elements in a compact row.",name:"row",required:!1,type:{name:"boolean"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}try{a.displayName="SearchByFormGroup",a.__docgenInfo={description:'A wrapper for the search/searchby multi-input pattern.\n\n_Will only work with full fields (`TextField`, `Autocomplete`). If building a custom field, ensure it\'s wrapped in a `FormControl`.\nThe "Search By" field id must be passed as the FormGroup supplies the label. See [TextField documentation](https://availity.github.io/element/?path=/docs/form-components-textfield-textfield--docs) for additional steps if using `select` instead of `Autocomplete`._',displayName:"SearchByFormGroup",props:{searchById:{defaultValue:null,description:"The id of the `searchBy` field. _Needed to accessibly link provided label to searchBy field._",name:"searchById",required:!0,type:{name:"string"}},searchByLabel:{defaultValue:{value:"Search By"},description:"The label of the `searchBy` field.",name:"searchByLabel",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormGroupClasses>"}},row:{defaultValue:{value:"false"},description:"Display group of elements in a compact row.",name:"row",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}const Ye={title:"Form Components/FormUtils/SearchByFormGroup",component:a,tags:["autodocs"]},o={render:()=>{const[r,t]=x.useState(""),i=s=>{t(s.target.value)};return e.jsxs(a,{searchById:"searchbystory-searchby",children:[e.jsxs(n,{id:"searchbystory-searchby",value:r,fullWidth:!1,select:!0,slotProps:{select:{onChange:i,labelId:"searchbystory-searchby-label"}},children:[e.jsx(l,{value:"Parameter 1",children:"Parameter 1"}),e.jsx(l,{value:"Parameter 2",children:"Parameter 2"}),e.jsx(l,{value:"Parameter 3",children:"Parameter 3"})]}),e.jsx(n,{id:"searchbystory-search",placeholder:"search",slotProps:{input:{startAdornment:e.jsx(B,{position:"start",component:"label",htmlFor:"searchbystory-search",children:e.jsx(b,{"aria-hidden":!1,titleAccess:"search"})})}}})]})}};var p,c,d;o.parameters={...o.parameters,docs:{...(p=o.parameters)==null?void 0:p.docs,source:{originalSource:`{
  render: () => {
    const [searchBy, setSearchBy] = useState('');
    const handleChange = (event: SelectChangeEvent) => {
      setSearchBy(event.target.value as string);
    };
    return <SearchByFormGroup searchById='searchbystory-searchby'>
      {/* It is recommended to use Autocomplete instead of a select TextField */}
      <TextField id="searchbystory-searchby" value={searchBy} fullWidth={false} select slotProps={{
        select: {
          onChange: handleChange,
          labelId: "searchbystory-searchby-label"
        }
      }}>
        <MenuItem value="Parameter 1">Parameter 1</MenuItem>
        <MenuItem value="Parameter 2">Parameter 2</MenuItem>
        <MenuItem value="Parameter 3">Parameter 3</MenuItem>
      </TextField>
      <TextField id="searchbystory-search" placeholder="search" slotProps={{
        input: {
          startAdornment: <InputAdornment position="start" component="label" htmlFor="searchbystory-search">
                <SearchIcon aria-hidden={false} titleAccess="search" />
              </InputAdornment>
        }
      }} />
      </SearchByFormGroup>;
  }
}`,...(d=(c=o.parameters)==null?void 0:c.docs)==null?void 0:d.source}}};const Ze=["_SearchBy"];export{o as _SearchBy,Ze as __namedExportsOrder,Ye as default};
