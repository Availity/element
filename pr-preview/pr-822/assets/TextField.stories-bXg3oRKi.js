import{j as t}from"./jsx-runtime-BTJTZTIL.js";import{T as H}from"./index-DdiRDdA4.js";import{C as A,u as F,F as I}from"./index.esm-Cdw3oWqD.js";import{B as f}from"./index-DnNfvsmq.js";import{P as C}from"./index-EBwYH3Ct.js";import{T as L}from"./index-DSF7aQ5o.js";import{G as j}from"./index-CQspzllj.js";import{T as R,a as E}from"./Types-FWYZLT-L.js";import"./index-ChsGqxH_.js";import"./index-BgYLq7fD.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./index-DNupz-aR.js";import"./index-DJKl12U0.js";import"./index-CIzqi3uD.js";import"./faCircleArrowRight-DSzUu1Qy.js";import"./faUser-D77uLSLS.js";import"./SvgIcon-CiBNlF9H.js";import"./generateUtilityClass-BeVSWKCg.js";import"./identifier-CudAVvBZ.js";import"./memoTheme-CpoNRPWX.js";import"./styled-CKuRQFSa.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./generateUtilityClasses-whvyra8-.js";import"./faCheck-BUdkY9Qv.js";import"./FormLabel-BDxB3zbH.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-t_-EwZHM.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./OutlinedInput-B93mfhOp.js";import"./isHostComponent-DVu5iVWx.js";import"./index-DfraP8LW.js";import"./extendSxProp-BY7TjwKM.js";import"./useTheme-Ib01SJ3a.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./utils-DoM3o7-Q.js";import"./useForkRef-Dz4aGlyk.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./ownerWindow-HkKU3E4x.js";import"./ownerDocument-DW-IO8s5.js";import"./debounce-Be36O1Ab.js";import"./Select-BRLJ6o5z.js";import"./Menu-GaZ6ImQN.js";import"./index-DyJdRKzS.js";import"./useSlotProps-BmqT0tgx.js";import"./resolveComponentProps-CCNxqvxI.js";import"./Popover-CQBNnNRW.js";import"./useSlot-1VRyIerd.js";import"./Portal-C2J4q3Ji.js";import"./useTheme-Cx1wRXKO.js";import"./utils-tFrEP9Vf.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./index-Bxu_udwM.js";import"./index-DdXvKv-Q.js";import"./useTimeout-iC_34LsC.js";import"./getReactElementRef-Df0xbma2.js";import"./Paper-4P5FqKie.js";import"./Modal-CezAubrN.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./useControlled-DxC1uCGX.js";import"./useId-DIK8ekB4.js";import"./createSvgIcon-BWWwXn7v.js";import"./FormHelperText-DrOxEAeh.js";import"./FormControlLabel-BzV1MzKU.js";import"./Typography-COSof5sR.js";import"./Switch-BftWopts.js";import"./SwitchBase-CYtmyT40.js";import"./ButtonBase-D97P5WV0.js";import"./isFocusVisible-B8k4qzLc.js";import"./RadioGroup-bZEe10Dj.js";import"./Radio-I3N--tLc.js";import"./FormGroup-GBcTM3pP.js";import"./Box-Dv31mJKI.js";import"./Divider-DJW73rZ3.js";import"./dividerClasses-0g4QmK6Y.js";import"./Stack-qbqOHiMo.js";import"./styled-Dbr83ACF.js";import"./useThemeProps-Do5o_sjG.js";import"./TextField-CiyvdTXx.js";import"./FormControl-BpN01e6f.js";import"./isMuiElement-DiOAsJE6.js";import"./Grid2-JMPt1-k0.js";import"./Tooltip-CIyLwlBA.js";import"./IconButton-D_kG6RhR.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./Container-DVbvSSVb.js";const p=({name:i,defaultValue:e,disabled:l,helperText:a,onBlur:o,onChange:s,rules:n={},shouldUnregister:g,value:M,transform:r,...h})=>t.jsx(A,{name:i,defaultValue:e,disabled:l,rules:{onChange:s,onBlur:o,value:M,shouldUnregister:g,...n},shouldUnregister:g,render:({field:{ref:O,...d},fieldState:{error:u}})=>{var y,b;return t.jsx(H,{required:typeof n.required=="object"?n.required.value:!!n.required,...d,onChange:v=>{var T;return d.onChange(((T=r==null?void 0:r.output)==null?void 0:T.call(r,v.target.value))??v)},value:((y=r==null?void 0:r.input)==null?void 0:y.call(r,d.value))??d.value??"",...h,slotProps:{...h.slotProps,htmlInput:{maxLength:typeof n.maxLength=="object"?n.maxLength.value:n.maxLength,...(b=h.slotProps)==null?void 0:b.htmlInput}},inputRef:O,error:!!u,helperText:u!=null&&u.message?t.jsxs(t.Fragment,{children:[u.message,t.jsx("br",{}),a]}):a})}});try{p.displayName="ControlledTextField",p.__docgenInfo={description:"",displayName:"ControlledTextField",props:{children:{defaultValue:null,description:`The content of the component.
@ignore`,name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<TextFieldClasses>"}},color:{defaultValue:{value:"'primary'"},description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).`,name:"color",required:!1,type:{name:'OverridableStringUnion<"primary" | "secondary" | "success" | "error" | "info" | "warning", TextFieldPropsColorOverrides>'}},margin:{defaultValue:{value:"'none'"},description:"If `dense` or `normal`, will adjust vertical spacing of this and contained components.",name:"margin",required:!1,type:{name:'"none" | "normal" | "dense"'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLDivElement>"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"ReactNode"}},select:{defaultValue:{value:"false"},description:"Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\nIf this option is set you must pass the options of the select as children.",name:"select",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:`The default value. Use when the component is not controlled.
**Important**: Can not apply undefined to defaultValue or defaultValues at useForm.
- You need to either set defaultValue at the field-level or useForm's defaultValues. undefined is not a valid value.
- If your form will invoke reset with default values, you will need to provide useForm with defaultValues.
- Calling onChange with undefined is not valid. You should use null or the empty string as your default/cleared value instead.`,name:"defaultValue",required:!1,type:{name:"any"}},autoFocus:{defaultValue:{value:"false"},description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.\nUse this prop to make `label` and `helperText` accessible for screen readers.",name:"id",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},error:{defaultValue:{value:"false"},description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.\nIf the input is disabled",name:"disabled",required:!1,type:{name:"boolean"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<TextFieldSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:"{ input?: SlotProps<ElementType<FilledInputProps, keyof IntrinsicElements>, {}, BaseTextFieldProps>; inputLabel?: SlotProps<...>; htmlInput?: SlotProps<...>; formHelperText?: SlotProps<...>; select?: SlotProps<...>; } | { ...; } | { ...; }"}},size:{defaultValue:{value:"'medium'"},description:"The size of the component.",name:"size",required:!1,type:{name:'OverridableStringUnion<"small" | "medium", TextFieldPropsSizeOverrides>'}},type:{defaultValue:null,description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},fullWidth:{defaultValue:{value:"true"},description:"If `true`, the input will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},focused:{defaultValue:null,description:"If `true`, the component is displayed in focused state.",name:"focused",required:!1,type:{name:"boolean"}},required:{defaultValue:{value:"false"},description:"If `true`, the label is displayed as required and the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},helpTopicId:{defaultValue:null,description:"Adds `FieldHelpIcon` next to the label (should not be within label for accessibility)",name:"helpTopicId",required:!1,type:{name:"string"}},hiddenLabel:{defaultValue:{value:"false"},description:"If `true`, the label is hidden.\nThis is used to increase density for a `FilledInput`.\nBe sure to add `aria-label` to the `input` element.",name:"hiddenLabel",required:!1,type:{name:"boolean"}},InputProps:{defaultValue:null,description:"Props applied to the Input element.\nIt will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),\n[`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)\ncomponent depending on the `variant` prop value.\n@deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n@deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n@deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"InputProps",required:!1,type:{name:"InputProps & (Partial<FilledInputProps> | Partial<OutlinedInputProps> | Partial<InputProps>)"}},FormHelperTextProps:{defaultValue:null,description:"Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.\n@deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"FormHelperTextProps",required:!1,type:{name:'FormHelperTextOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & { ...; }, "children" | ... 10 more ... | "required"> & { ...; } & Partial<...>'}},helperText:{defaultValue:null,description:"The helper text content.",name:"helperText",required:!1,type:{name:"ReactNode"}},InputLabelProps:{defaultValue:null,description:"Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.\nPointer events like `onClick` are enabled if and only if `shrink` is `true`.\n@deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"InputLabelProps",required:!1,type:{name:'{ helpTopicId?: string; } & FormLabelBaseProps & FormLabelOwnProps & CommonProps & Omit<Omit<DetailedHTMLProps<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, "ref"> & { ...; }, "children" | ... 268 more ... | "required"> & { ...; } & Partial<...>'}},inputProps:{defaultValue:null,description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n@deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a `textarea` element is rendered instead of an input.",name:"multiline",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},SelectProps:{defaultValue:null,description:"Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.\n@deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"SelectProps",required:!1,type:{name:"SelectProps & Partial<SelectProps>"}},showCharacterCount:{defaultValue:{value:"false"},description:"if `true`, the character counter will display. The maxLength is taken from the `inputProps.maxLength` prop.",name:"showCharacterCount",required:!1,type:{name:"boolean"}},displayOverflowMaxLength:{defaultValue:{value:"false"},description:"If `true`, the input maxLength can be exceeded. If validation is required, you'll have to do it manually.",name:"displayOverflowMaxLength",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"(event: any) => void"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(event: any) => void"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},name:{defaultValue:null,description:"Unique name of your input",name:"name",required:!0,type:{name:"string"}},rules:{defaultValue:{value:"{}"},description:`react-hook-form internal validation rules in the same format as [register options](https://react-hook-form.com/docs/useform/register#options), which includes:
required, min, max, minLength, maxLength, pattern, validate

Not used if 3rd party schema/resolver used.`,name:"rules",required:!1,type:{name:'Omit<RegisterOptions<FieldValues, string>, "disabled" | "setValueAs" | "valueAsNumber" | "valueAsDate">'}},shouldUnregister:{defaultValue:null,description:"Input will be unregistered after unmount and defaultValues will be removed as well.",name:"shouldUnregister",required:!1,type:{name:"boolean"}},transform:{defaultValue:null,description:"Object containing functions to parse the input value and format the output value. Useful for converting values from API responses to display values and back.\n- `input`: Function to transform the value from the underlying data to the input value.\n- `output`: Function to transform the value from the input to the underlying data.\n\nExample: The input always expects a dayjs object, but your endpoint expects and returns a string:\n`{ input: (value) => value ? dayjs(value) : null, output: (value) => value.format('YYYY-MM-DD') }`",name:"transform",required:!1,type:{name:"{ input?: (value: Output) => string; output?: (value: string) => Output; }"}}}}}catch{}const xt={title:"Form Components/Controlled Form/ControlledTextField",component:p,tags:["autodocs"],argTypes:{...E,...R,helperText:{type:"string",table:{category:"Input Props"}}}},m={render:i=>{var l,a,o;const e=F({values:{[i.name]:""}});return t.jsx(I,{...e,children:t.jsxs("form",{onSubmit:e.handleSubmit(s=>s),children:[t.jsx(p,{...i}),t.jsxs(j,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[t.jsx(f,{disabled:!((l=e==null?void 0:e.formState)!=null&&l.isSubmitSuccessful),children:"Reset",color:"secondary",onClick:()=>e.reset()}),t.jsx(f,{type:"submit",disabled:(a=e==null?void 0:e.formState)==null?void 0:a.isSubmitSuccessful,children:"Submit"})]}),(o=e==null?void 0:e.formState)!=null&&o.isSubmitSuccessful?t.jsxs(C,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[t.jsx(L,{variant:"h2",children:"Submitted Values"}),t.jsx("pre",{"data-testid":"result",children:JSON.stringify(e.getValues(),null,2)})]}):null]})})},args:{name:"controlledTextField",placeholder:"Name",required:!0,rules:{required:"This field is required.",maxLength:{value:10,message:"Too long"}},label:"TextField Label",showCharacterCount:!0}},c={render:i=>{var l,a,o;const e=F({values:{[i.name]:""}});return t.jsx(I,{...e,children:t.jsxs("form",{onSubmit:e.handleSubmit(s=>s),children:[t.jsx(p,{...i}),t.jsxs(j,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[t.jsx(f,{disabled:!((l=e==null?void 0:e.formState)!=null&&l.isSubmitSuccessful),children:"Reset",color:"secondary",onClick:()=>e.reset()}),t.jsx(f,{type:"submit",disabled:(a=e==null?void 0:e.formState)==null?void 0:a.isSubmitSuccessful,children:"Submit"})]}),(o=e==null?void 0:e.formState)!=null&&o.isSubmitSuccessful?t.jsxs(C,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[t.jsx(L,{variant:"h2",children:"Submitted Values"}),t.jsx("pre",{"data-testid":"result",children:JSON.stringify(e.getValues(),null,2)})]}):null]})})},args:{name:"controlledTextField",helperText:"This is some helper text",placeholder:"Name",required:!0,rules:{required:"This field is required.",maxLength:{value:10,message:"Too long"}},label:"TextField Label",displayOverflowMaxLength:!0,showCharacterCount:!0}};var x,S,P;m.parameters={...m.parameters,docs:{...(x=m.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: (args: ControlledTextFieldProps) => {
    const methods = useForm({
      values: {
        [args.name]: ''
      }
    });
    return <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(data => data)}>
          <ControlledTextField {...args} />
          <Grid container direction="row" justifyContent="space-between" marginTop={1}>
            <Button disabled={!methods?.formState?.isSubmitSuccessful} children="Reset" color="secondary" onClick={() => methods.reset()} />
            <Button type="submit" disabled={methods?.formState?.isSubmitSuccessful} children="Submit" />
          </Grid>
          {methods?.formState?.isSubmitSuccessful ? <Paper sx={{
          padding: '1.5rem',
          marginTop: '1.5rem'
        }}>
              <Typography variant="h2">Submitted Values</Typography>
              <pre data-testid="result">{JSON.stringify(methods.getValues(), null, 2)}</pre>
            </Paper> : null}
        </form>
      </FormProvider>;
  },
  args: {
    name: 'controlledTextField',
    placeholder: 'Name',
    required: true,
    rules: {
      required: 'This field is required.',
      maxLength: {
        value: 10,
        message: 'Too long'
      }
    },
    label: 'TextField Label',
    showCharacterCount: true
  }
}`,...(P=(S=m.parameters)==null?void 0:S.docs)==null?void 0:P.source}}};var q,w,V;c.parameters={...c.parameters,docs:{...(q=c.parameters)==null?void 0:q.docs,source:{originalSource:`{
  render: (args: ControlledTextFieldProps) => {
    const methods = useForm({
      values: {
        [args.name]: ''
      }
    });
    return <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(data => data)}>
          <ControlledTextField {...args} />
          <Grid container direction="row" justifyContent="space-between" marginTop={1}>
            <Button disabled={!methods?.formState?.isSubmitSuccessful} children="Reset" color="secondary" onClick={() => methods.reset()} />
            <Button type="submit" disabled={methods?.formState?.isSubmitSuccessful} children="Submit" />
          </Grid>
          {methods?.formState?.isSubmitSuccessful ? <Paper sx={{
          padding: '1.5rem',
          marginTop: '1.5rem'
        }}>
              <Typography variant="h2">Submitted Values</Typography>
              <pre data-testid="result">{JSON.stringify(methods.getValues(), null, 2)}</pre>
            </Paper> : null}
        </form>
      </FormProvider>;
  },
  args: {
    name: 'controlledTextField',
    helperText: 'This is some helper text',
    placeholder: 'Name',
    required: true,
    rules: {
      required: 'This field is required.',
      maxLength: {
        value: 10,
        message: 'Too long'
      }
    },
    label: 'TextField Label',
    displayOverflowMaxLength: true,
    showCharacterCount: true
  }
}`,...(V=(w=c.parameters)==null?void 0:w.docs)==null?void 0:V.source}}};const St=["_ControlledTextField","_ControlledTextFieldDisplayOverflow"];export{m as _ControlledTextField,c as _ControlledTextFieldDisplayOverflow,St as __namedExportsOrder,xt as default};
