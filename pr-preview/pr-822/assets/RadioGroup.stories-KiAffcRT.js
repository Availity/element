import{j as e}from"./jsx-runtime-BTJTZTIL.js";import{F,R as w,a as G,i as c,j as f}from"./index-DNupz-aR.js";import{C as T,u as N,F as P}from"./index.esm-Cdw3oWqD.js";import{F as _}from"./FormControl-BpN01e6f.js";import{B as b}from"./index-DnNfvsmq.js";import{P as Y}from"./index-EBwYH3Ct.js";import{T as A}from"./index-DSF7aQ5o.js";import{G as L}from"./index-CQspzllj.js";import{R as O,a as I}from"./Types-FWYZLT-L.js";import"./index-ChsGqxH_.js";import"./index-DJKl12U0.js";import"./index-CIzqi3uD.js";import"./faCircleArrowRight-DSzUu1Qy.js";import"./index-BgYLq7fD.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./faUser-D77uLSLS.js";import"./SvgIcon-CiBNlF9H.js";import"./generateUtilityClass-BeVSWKCg.js";import"./identifier-CudAVvBZ.js";import"./memoTheme-CpoNRPWX.js";import"./styled-CKuRQFSa.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./generateUtilityClasses-whvyra8-.js";import"./faCheck-BUdkY9Qv.js";import"./FormLabel-BDxB3zbH.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-t_-EwZHM.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./OutlinedInput-B93mfhOp.js";import"./isHostComponent-DVu5iVWx.js";import"./index-DfraP8LW.js";import"./extendSxProp-BY7TjwKM.js";import"./useTheme-Ib01SJ3a.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./utils-DoM3o7-Q.js";import"./useForkRef-Dz4aGlyk.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./ownerWindow-HkKU3E4x.js";import"./ownerDocument-DW-IO8s5.js";import"./debounce-Be36O1Ab.js";import"./Select-BRLJ6o5z.js";import"./Menu-GaZ6ImQN.js";import"./index-DyJdRKzS.js";import"./useSlotProps-BmqT0tgx.js";import"./resolveComponentProps-CCNxqvxI.js";import"./Popover-CQBNnNRW.js";import"./useSlot-1VRyIerd.js";import"./Portal-C2J4q3Ji.js";import"./useTheme-Cx1wRXKO.js";import"./utils-tFrEP9Vf.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./index-Bxu_udwM.js";import"./index-DdXvKv-Q.js";import"./useTimeout-iC_34LsC.js";import"./getReactElementRef-Df0xbma2.js";import"./Paper-4P5FqKie.js";import"./Modal-CezAubrN.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./useControlled-DxC1uCGX.js";import"./useId-DIK8ekB4.js";import"./createSvgIcon-BWWwXn7v.js";import"./FormHelperText-DrOxEAeh.js";import"./FormControlLabel-BzV1MzKU.js";import"./Typography-COSof5sR.js";import"./Switch-BftWopts.js";import"./SwitchBase-CYtmyT40.js";import"./ButtonBase-D97P5WV0.js";import"./isFocusVisible-B8k4qzLc.js";import"./RadioGroup-bZEe10Dj.js";import"./Radio-I3N--tLc.js";import"./FormGroup-GBcTM3pP.js";import"./Box-Dv31mJKI.js";import"./Divider-DJW73rZ3.js";import"./dividerClasses-0g4QmK6Y.js";import"./Stack-qbqOHiMo.js";import"./styled-Dbr83ACF.js";import"./useThemeProps-Do5o_sjG.js";import"./isMuiElement-DiOAsJE6.js";import"./Tooltip-CIyLwlBA.js";import"./IconButton-D_kG6RhR.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./Grid2-JMPt1-k0.js";import"./Container-DVbvSSVb.js";const d=({name:a,helperText:t,label:i,defaultValue:l,onBlur:n,onChange:m,required:j,rules:u={},shouldUnregister:h,value:V,transform:o,...q})=>e.jsx(T,{name:a,defaultValue:l,rules:{onBlur:n,onChange:m,shouldUnregister:h,value:V,...u},shouldUnregister:h,render:({field:{disabled:R,...s},fieldState:{error:r}})=>{var y;return e.jsxs(_,{error:!!r,disabled:R,required:!!j||(typeof u.required=="object"?u.required.value:!!u.required),children:[e.jsx(F,{children:i}),e.jsx(w,{...s,onChange:g=>{var v;return s.onChange(((v=o==null?void 0:o.output)==null?void 0:v.call(o,g.target.value))??g)},value:((y=o==null?void 0:o.input)==null?void 0:y.call(o,s.value))??s.value??"",...q}),e.jsx(G,{children:r!=null&&r.message?e.jsxs(e.Fragment,{children:[r.message,e.jsx("br",{}),t]}):t})]})}});try{d.displayName="ControlledRadioGroup",d.__docgenInfo={description:"",displayName:"ControlledRadioGroup",props:{name:{defaultValue:null,description:"Unique name of your input",name:"name",required:!0,type:{name:"string"}},label:{defaultValue:null,description:"",name:"label",required:!0,type:{name:"string"}},helperText:{defaultValue:null,description:"",name:"helperText",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormGroupClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},defaultValue:{defaultValue:null,description:`The default value. Use when the component is not controlled.
**Important**: Can not apply undefined to defaultValue or defaultValues at useForm.
- You need to either set defaultValue at the field-level or useForm's defaultValues. undefined is not a valid value.
- If your form will invoke reset with default values, you will need to provide useForm with defaultValues.
- Calling onChange with undefined is not valid. You should use null or the empty string as your default/cleared value instead.`,name:"defaultValue",required:!1,type:{name:"any"}},row:{defaultValue:{value:"false"},description:"Display group of elements in a compact row.",name:"row",required:!1,type:{name:"boolean"}},onBlur:{defaultValue:null,description:"",name:"onBlur",required:!1,type:{name:"(event: any) => void"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(event: any) => void"}},value:{defaultValue:null,description:"",name:"value",required:!1,type:{name:"any"}},disabled:{defaultValue:null,description:"If the input is disabled",name:"disabled",required:!1,type:{name:"boolean"}},rules:{defaultValue:{value:"{}"},description:`react-hook-form internal validation rules in the same format as [register options](https://react-hook-form.com/docs/useform/register#options), which includes:
required, min, max, minLength, maxLength, pattern, validate

Not used if 3rd party schema/resolver used.`,name:"rules",required:!1,type:{name:'Omit<RegisterOptions<FieldValues, string>, "disabled" | "setValueAs" | "valueAsNumber" | "valueAsDate">'}},shouldUnregister:{defaultValue:null,description:"Input will be unregistered after unmount and defaultValues will be removed as well.",name:"shouldUnregister",required:!1,type:{name:"boolean"}},transform:{defaultValue:null,description:"Object containing functions to parse the input value and format the output value. Useful for converting values from API responses to display values and back.\n- `input`: Function to transform the value from the underlying data to the input value.\n- `output`: Function to transform the value from the input to the underlying data.\n\nExample: The input always expects a dayjs object, but your endpoint expects and returns a string:\n`{ input: (value) => value ? dayjs(value) : null, output: (value) => value.format('YYYY-MM-DD') }`",name:"transform",required:!1,type:{name:"{ input?: (value: Output) => string; output?: (value: string) => Output; }"}},required:{defaultValue:{value:"false"},description:"If `true`, the label will indicate that the `input` is required.",name:"required",required:!1,type:{name:"boolean"}}}}}catch{}const xt={title:"Form Components/Controlled Form/ControlledRadioGroup",component:d,tags:["autodocs"],argTypes:{...I,...O,required:{table:{category:"Input Props"}}},parameters:{controls:{exclude:["max","maxLength","min","minLength","pattern","validate"]}}},p={render:a=>{var i,l,n;const t=N();return e.jsx(P,{...t,children:e.jsxs("form",{onSubmit:t.handleSubmit(m=>m),children:[e.jsxs(d,{...a,children:[e.jsx(c,{control:e.jsx(f,{}),label:"N/A",value:"N/A"}),e.jsx(c,{control:e.jsx(f,{}),label:"Yes",value:"Yes"}),e.jsx(c,{control:e.jsx(f,{}),label:"No",value:"No"})]}),e.jsxs(L,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[e.jsx(b,{disabled:!((i=t==null?void 0:t.formState)!=null&&i.isSubmitSuccessful),children:"Reset",color:"secondary",onClick:()=>t.reset()}),e.jsx(b,{type:"submit",disabled:(l=t==null?void 0:t.formState)==null?void 0:l.isSubmitSuccessful,children:"Submit"})]}),(n=t==null?void 0:t.formState)!=null&&n.isSubmitSuccessful?e.jsxs(Y,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[e.jsx(A,{variant:"h2",children:"Submitted Values"}),e.jsx("pre",{"data-testid":"result",children:JSON.stringify(t.getValues(),null,2)})]}):null]})})},args:{name:"controlledRadioGroup",label:"Radio Group"}};var x,C,S;p.parameters={...p.parameters,docs:{...(x=p.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: (args: ControlledRadioGroupProps) => {
    const methods = useForm();
    return <FormProvider {...methods}>
        <form onSubmit={methods.handleSubmit(data => data)}>
          <ControlledRadioGroup {...args}>
            <FormControlLabel control={<Radio />} label="N/A" value="N/A" />
            <FormControlLabel control={<Radio />} label="Yes" value="Yes" />
            <FormControlLabel control={<Radio />} label="No" value="No" />
          </ControlledRadioGroup>
          <Grid container direction="row" justifyContent="space-between" marginTop={1}>
            <Button disabled={!methods?.formState?.isSubmitSuccessful} children="Reset" color="secondary" onClick={() => methods.reset()} />
            <Button type="submit" disabled={methods?.formState?.isSubmitSuccessful} children="Submit" />
          </Grid>
          {methods?.formState?.isSubmitSuccessful ? <Paper sx={{
          padding: '1.5rem',
          marginTop: '1.5rem'
        }}>
              <Typography variant="h2">Submitted Values</Typography>
              <pre data-testid="result">{JSON.stringify(methods.getValues(), null, 2)}</pre>
            </Paper> : null}
        </form>
      </FormProvider>;
  },
  args: {
    name: 'controlledRadioGroup',
    label: 'Radio Group'
  }
}`,...(S=(C=p.parameters)==null?void 0:C.docs)==null?void 0:S.source}}};const Ct=["_ControlledRadioGroup"];export{p as _ControlledRadioGroup,Ct as __namedExportsOrder,xt as default};
