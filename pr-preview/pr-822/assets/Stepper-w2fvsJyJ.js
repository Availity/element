import{j as n}from"./jsx-runtime-BTJTZTIL.js";import{a as N,b as L,d as R,c as V,S as w}from"./Stepper-DKdQDQGc.js";import{W as y,S as E,j as B,N as k}from"./index-CIzqi3uD.js";import{T as M}from"./index-DSF7aQ5o.js";import{r as d}from"./index-BgYLq7fD.js";import{I as S}from"./index-DnNfvsmq.js";import{G as j}from"./index-CQspzllj.js";import{s as q}from"./styled-CKuRQFSa.js";const b=({children:e,...a})=>n.jsx(N,{...a,children:e});try{b.displayName="Step",b.__docgenInfo={description:"",displayName:"Step",props:{component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},active:{defaultValue:null,description:"Sets the step as active. Is passed to child components.",name:"active",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"Should be `Step` sub-components such as `StepLabel`, `StepContent`.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<StepClasses> & Partial<ClassNameMap<never>>"}},completed:{defaultValue:null,description:"Mark the step as completed. Is passed to child components.",name:"completed",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If `true`, the step is disabled, will also disable the button if\n`StepButton` is a child of `Step`. Is passed to child components.",name:"disabled",required:!1,type:{name:"boolean"}},expanded:{defaultValue:{value:"false"},description:"Expand the step.",name:"expanded",required:!1,type:{name:"boolean"}},index:{defaultValue:null,description:`The position of the step.
The prop defaults to the value inherited from the parent Stepper component.`,name:"index",required:!1,type:{name:"number"}},last:{defaultValue:null,description:"If `true`, the Step is displayed as rendered last.\nThe prop defaults to the value inherited from the parent Stepper component.",name:"last",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLDivElement>"}}}}}catch{}const v=({children:e,...a})=>n.jsx(L,{...a,disableRipple:!0,disableTouchRipple:!0,children:e});try{v.displayName="StepButton",v.__docgenInfo={description:"",displayName:"StepButton",props:{children:{defaultValue:null,description:"Can be a `StepLabel` or a node to place inside `StepLabel` as children.\nThe content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<StepButtonClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},tabIndex:{defaultValue:{value:"0"},description:"",name:"tabIndex",required:!1,type:{name:"number"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},icon:{defaultValue:null,description:"The icon displayed by the step label.",name:"icon",required:!1,type:{name:"ReactNode"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},optional:{defaultValue:null,description:"The optional node to display.",name:"optional",required:!1,type:{name:"ReactNode"}}}}}catch{}const u=({error:e,completed:a,warning:l,...i})=>{let s=null;return e&&(s=y),l&&(s=r=>n.jsx(y,{color:"warning",...r})),a&&(s=E),n.jsx(R,{...i,error:e,completed:a,as:s})};try{u.displayName="StepIcon",u.__docgenInfo={description:"",displayName:"StepIcon",props:{warning:{defaultValue:null,description:"If `true`, the step will have a warning icon.",name:"warning",required:!1,type:{name:"boolean"}},active:{defaultValue:{value:"false"},description:"Whether this step is active.",name:"active",required:!1,type:{name:"boolean"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<StepIconClasses>"}},completed:{defaultValue:{value:"false"},description:"Mark the step as completed. Is passed to child components.",name:"completed",required:!1,type:{name:"boolean"}},error:{defaultValue:{value:"false"},description:"If `true`, the step is marked as failed.",name:"error",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"The label displayed in the step icon.",name:"icon",required:!0,type:{name:"ReactNode"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"(props: SvgIconProps) => Element"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},color:{defaultValue:{value:"'inherit'"},description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
You can use the \`htmlColor\` prop to apply a color attribute to the SVG element.`,name:"color",required:!1,type:{name:'OverridableStringUnion<"inherit" | "primary" | "secondary" | "success" | "error" | "info" | "warning" | "disabled" | "action", SvgIconPropsColorOverrides>'}},fontSize:{defaultValue:{value:"'medium'"},description:"The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",name:"fontSize",required:!1,type:{name:'OverridableStringUnion<"small" | "inherit" | "medium" | "large", SvgIconPropsSizeOverrides>'}},shapeRendering:{defaultValue:null,description:`The shape-rendering attribute. The behavior of the different options is described on the
[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
If you are having issues with blurry icons you should investigate this prop.`,name:"shapeRendering",required:!1,type:{name:"string"}},htmlColor:{defaultValue:null,description:"Applies a color attribute to the SVG element.",name:"htmlColor",required:!1,type:{name:"string"}},inheritViewBox:{defaultValue:{value:"false"},description:"If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\nprop will be ignored.\nUseful when you want to reference a custom `component` and have `SvgIcon` pass that\n`component`'s viewBox to the root node.",name:"inheritViewBox",required:!1,type:{name:"boolean"}},titleAccess:{defaultValue:null,description:`Provides a human-readable title for the element that contains it.
https://www.w3.org/TR/SVG-access/#Equivalent`,name:"titleAccess",required:!1,type:{name:"string"}},viewBox:{defaultValue:{value:"'0 0 24 24'"},description:`Allows you to redefine what the coordinates without units mean inside an SVG element.
For example, if the SVG element is 500 (width) by 200 (height),
and you pass viewBox="0 0 50 20",
this means that the coordinates inside the SVG will go from the top left corner (0,0)
to bottom right (50,20) and each unit will be worth 10px.`,name:"viewBox",required:!1,type:{name:"string"}}}}}catch{}const c=({children:e,error:a,optional:l,warning:i,...s})=>(typeof l=="string"&&(l=n.jsx(M,{variant:"caption",children:l})),n.jsx(V,{StepIconProps:{error:a,warning:i},StepIconComponent:u,error:a,optional:l,...s,children:e}));c.muiName=V.muiName;try{c.displayName="StepLabel",c.__docgenInfo={description:"",displayName:"StepLabel",props:{warning:{defaultValue:null,description:"If `true`, the step will have a warning icon.",name:"warning",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"In most cases will simply be a string containing a title for the label.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<StepLabelClasses>"}},componentsProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.\n@deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"componentsProps",required:!1,type:{name:"{ label?: HTMLProps<HTMLSpanElement>; }"}},error:{defaultValue:{value:"false"},description:"If `true`, the step is marked as failed.",name:"error",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"Override the default label of the step icon.",name:"icon",required:!1,type:{name:"ReactNode"}},optional:{defaultValue:null,description:"The optional node to display.",name:"optional",required:!1,type:{name:"ReactNode"}},StepIconComponent:{defaultValue:null,description:"The component to render in place of the [`StepIcon`](https://mui.com/material-ui/api/step-icon/).\n@deprecated Use `slots.stepIcon` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"StepIconComponent",required:!1,type:{name:"ElementType<StepIconProps, keyof IntrinsicElements>"}},StepIconProps:{defaultValue:null,description:"Props applied to the [`StepIcon`](https://mui.com/material-ui/api/step-icon/) element.\n@deprecated Use `slotProps.stepIcon` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"StepIconProps",required:!1,type:{name:"Partial<StepIconProps>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<StepLabelSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:"{ label?: SlotProps<ElementType<HTMLProps<HTMLSpanElement>, keyof IntrinsicElements>, {}, StepLabelOwnerState>; stepIcon?: SlotProps<...>; }"}}}}}catch{}const O=q(w,{name:"MuiStepper",slot:"AvHideConnector",overridesResolver:(e,a)=>a.avHideConnector})({".MuiStepLabel-root::before, .MuiStepLabel-root::after, .MuiStepConnector-root":{display:"none"}}),g=({children:e,connector:a,orientation:l,scrollButtons:i,...s})=>{const r=l!=="vertical",m=a===null?O:w,o=d.useRef(null),[x,I]=d.useState(!0),[T,P]=d.useState(!0);d.useEffect(()=>{const t=o.current,p=()=>{if(t){I(t.scrollLeft>0);const _=Math.abs(t.scrollWidth-t.clientWidth-t.scrollLeft)<=1;P(!_)}},h=new ResizeObserver(()=>{p()});return t&&(t.addEventListener("scroll",p),h.observe(t),p()),()=>{t&&(t.removeEventListener("scroll",p),h.disconnect())}},[]);const C=i&&l!=="vertical",f=q("div")({width:"50px",flexShrink:0,paddingTop:"15px"});return C?n.jsxs(j,{container:!0,direction:"row",justifyContent:"space-between",wrap:"nowrap",children:[n.jsx(f,{style:{paddingRight:"8px"},children:x&&n.jsx(S,{title:"Previous",variant:"outlined",onClick:()=>{var t;return(t=o.current)==null?void 0:t.scrollTo({left:0,behavior:"smooth"})},children:n.jsx(B,{fontSize:"xsmall"})})}),n.jsx(m,{"aria-label":"multi-step process",role:"region",...s,connector:a,orientation:l,alternativeLabel:r,ref:o,children:e,tabIndex:0}),n.jsx(f,{style:{paddingLeft:"8px"},children:T&&n.jsx(S,{title:"Next",variant:"outlined",onClick:()=>{var t;(t=o.current)==null||t.scrollTo({left:o.current.scrollWidth-o.current.clientWidth,behavior:"smooth"})},children:n.jsx(k,{fontSize:"xsmall"})})})]}):n.jsx(m,{"aria-label":"multi-step process",role:"region",...s,connector:a,orientation:l,alternativeLabel:r,ref:o,children:e})};try{g.displayName="Stepper",g.__docgenInfo={description:"",displayName:"Stepper",props:{scrollButtons:{defaultValue:null,description:"",name:"scrollButtons",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"Two or more `<Step />` components.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<StepperClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},variant:{defaultValue:{value:"'elevation'"},description:"The variant to use.",name:"variant",required:!1,type:{name:'OverridableStringUnion<"elevation" | "outlined", PaperPropsVariantOverrides>'}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLDivElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},square:{defaultValue:{value:"false"},description:"If `true`, rounded corners are disabled.",name:"square",required:!1,type:{name:"boolean"}},orientation:{defaultValue:{value:"'horizontal'"},description:"The component orientation (layout flow direction).",name:"orientation",required:!1,type:{name:"Orientation"}},activeStep:{defaultValue:{value:"0"},description:`Set the active step (zero based index).
Set to -1 to disable all the steps.`,name:"activeStep",required:!1,type:{name:"number"}},connector:{defaultValue:{value:"<StepConnector />"},description:"An element to be placed between each step.",name:"connector",required:!1,type:{name:"ReactElement<unknown, any>"}},nonLinear:{defaultValue:{value:"false"},description:"If set the `Stepper` will not assist in controlling steps for linear flow.",name:"nonLinear",required:!1,type:{name:"boolean"}}}}}catch{}export{b as S,g as a,v as b,c};
