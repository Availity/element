{"version":3,"file":"index-36d60775.js","sources":["../../../packages/badge/dist/index.mjs","../../../packages/checkbox/dist/index.mjs","../../../packages/feedback/dist/index.mjs"],"sourcesContent":["// src/lib/Badge.tsx\nimport { Badge as MUIBadge } from \"@mui/material\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Badge = ({ children, color = \"error\", ...rest }) => /* @__PURE__ */ jsx(MUIBadge, {\n  color,\n  ...rest,\n  children\n});\nexport {\n  Badge\n};\n","// src/lib/Checkbox.tsx\nimport { forwardRef } from \"react\";\nimport { Checkbox as MuiCheckbox } from \"@mui/material\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Checkbox = forwardRef((props, ref) => {\n  return /* @__PURE__ */ jsx(MuiCheckbox, {\n    ...props,\n    ref,\n    size: \"medium\"\n  });\n});\nexport {\n  Checkbox\n};\n","// src/lib/Feedback.tsx\nimport { useState } from \"react\";\nimport { Popover } from \"@availity/mui-popover\";\nimport { Button as Button2 } from \"@availity/mui-button\";\nimport { Container, styled as styled2 } from \"@mui/material\";\nimport { avLogMessagesApi } from \"@availity/api-axios\";\n\n// src/lib/FeedbackForm.tsx\nimport { TextField } from \"@availity/mui-textfield\";\nimport { LoadingButton, Button } from \"@availity/mui-button\";\nimport { ToggleButtonGroup, ToggleButton } from \"@availity/mui-toggle-button\";\nimport { Tooltip } from \"@availity/mui-tooltip\";\nimport { Grid, styled } from \"@mui/material\";\nimport { FaceFrownIcon, FaceNeutralIcon, FaceSmileIcon } from \"@availity/mui-icon\";\nimport { avRegionsApi } from \"@availity/api-axios\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar SmileButtons = styled(ToggleButtonGroup, { name: \"SmileButtons\", slot: \"root\" })({});\nvar SmileButton = ({ disabled, Icon, label, value, ...props }) => /* @__PURE__ */ jsx(Tooltip, {\n  title: label,\n  children: /* @__PURE__ */ jsx(\"div\", {\n    children: /* @__PURE__ */ jsx(ToggleButton, {\n      value,\n      ...props,\n      disabled,\n      children: /* @__PURE__ */ jsx(Icon, {\n        fontSize: \"large\"\n      })\n    })\n  })\n});\nvar FeedbackForm = ({\n  analytics,\n  appName,\n  handleClose,\n  loading,\n  setLoading,\n  setSent\n}) => {\n  const { control, handleSubmit, setValue, watch } = useForm();\n  const onSubmit = async ({ smileField, ...values }) => {\n    setLoading(true);\n    try {\n      const response = await avRegionsApi.getCurrentRegion();\n      await analytics.info({\n        surveyId: `${appName.replace(/\\s/g, \"_\")}_Smile_Survey`,\n        smileLocation: `${appName}`,\n        smile: `icon-${smileField}`,\n        url: window.location.href,\n        region: response.data.regions[0] && response.data.regions[0].id,\n        userAgent: window.navigator.userAgent,\n        submitTime: new Date(),\n        ...values\n      });\n      setTimeout(() => {\n        setSent(true);\n        setLoading(false);\n        handleClose();\n      }, 2e3);\n    } catch {\n      setSent(false);\n      setLoading(false);\n    }\n  };\n  const options = [\n    {\n      Icon: FaceSmileIcon,\n      label: \"What do you like?\",\n      value: \"smile\"\n    },\n    {\n      Icon: FaceNeutralIcon,\n      label: \"What would you improve?\",\n      value: \"meh\"\n    },\n    { Icon: FaceFrownIcon, label: \"What don't you like?\", value: \"frown\" }\n  ];\n  return /* @__PURE__ */ jsxs(Grid, {\n    component: \"form\",\n    container: true,\n    justifyContent: \"center\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [\n      /* @__PURE__ */ jsx(Controller, {\n        control,\n        name: \"smileField\",\n        render: ({ field }) => {\n          return /* @__PURE__ */ jsx(SmileButtons, {\n            children: options.map((props) => /* @__PURE__ */ jsx(SmileButton, {\n              disabled: loading,\n              ...props\n            }, props.value)),\n            ...field,\n            onChange: (event, value) => {\n              setValue(field.name, value);\n            },\n            size: \"medium\",\n            exclusive: true\n          });\n        }\n      }),\n      /* @__PURE__ */ jsx(Controller, {\n        control,\n        name: \"feedback\",\n        render: ({ field }) => /* @__PURE__ */ jsx(TextField, {\n          ...field,\n          fullWidth: true,\n          multiline: true,\n          minRows: 3,\n          maxRows: 3,\n          label: \"What would you improve?\",\n          disabled: loading\n        })\n      }),\n      /* @__PURE__ */ jsxs(Grid, {\n        container: true,\n        direction: \"row\",\n        marginTop: \"8px\",\n        spacing: 1,\n        children: [\n          /* @__PURE__ */ jsx(Grid, {\n            item: true,\n            xs: 6,\n            children: /* @__PURE__ */ jsx(Button, {\n              color: \"secondary\",\n              disabled: loading,\n              fullWidth: true,\n              children: \"Cancel\"\n            })\n          }),\n          /* @__PURE__ */ jsx(Grid, {\n            item: true,\n            xs: 6,\n            children: /* @__PURE__ */ jsx(LoadingButton, {\n              disabled: !watch(\"smileField\"),\n              fullWidth: true,\n              loading,\n              type: \"submit\",\n              variant: \"contained\",\n              children: \"Send Feedback\"\n            })\n          })\n        ]\n      })\n    ]\n  });\n};\n\n// src/lib/FeedbackHeader.tsx\nimport { IconButton } from \"@availity/mui-button\";\nimport { CloseIcon } from \"@availity/mui-icon\";\n\n// ../typography/src/lib/Typography.tsx\nimport { forwardRef } from \"react\";\nimport { Typography as MuiTypography } from \"@mui/material\";\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar Typography = forwardRef(\n  ({ children, ...rest }, ref) => {\n    return /* @__PURE__ */ jsx2(MuiTypography, {\n      ...rest,\n      ref,\n      children\n    });\n  }\n);\n\n// src/lib/FeedbackHeader.tsx\nimport { Grid as Grid2 } from \"@mui/material\";\nimport { jsx as jsx3, jsxs as jsxs2 } from \"react/jsx-runtime\";\nvar FeedbackHeader = ({ appName, handleClose, loading, sent }) => {\n  return /* @__PURE__ */ jsxs2(Grid2, {\n    alignItems: \"center\",\n    container: true,\n    direction: \"row\",\n    marginBottom: \"8px\",\n    justifyContent: \"space-between\",\n    whiteSpace: \"nowrap\",\n    children: [\n      /* @__PURE__ */ jsx3(Grid2, {\n        item: true,\n        width: \"\",\n        children: /* @__PURE__ */ jsx3(Typography, {\n          variant: \"h5\",\n          children: sent ? \"Thank you for your feedback.\" : `Tell us what you think about ${appName}`\n        })\n      }),\n      /* @__PURE__ */ jsx3(Grid2, {\n        item: true,\n        children: /* @__PURE__ */ jsx3(IconButton, {\n          disabled: loading,\n          title: \"Close\",\n          onClick: handleClose,\n          children: /* @__PURE__ */ jsx3(CloseIcon, {})\n        })\n      })\n    ]\n  });\n};\n\n// src/lib/Feedback.tsx\nimport { Fragment, jsx as jsx4, jsxs as jsxs3 } from \"react/jsx-runtime\";\nvar FeedbackContainer = styled2(Container, { name: \"FeedbackContainer\", slot: \"root\" })({});\nvar Feedback = ({ analytics = avLogMessagesApi, appName }) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [sent, setSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const handlePopoverOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n  const open = Boolean(anchorEl);\n  return /* @__PURE__ */ jsxs3(Fragment, {\n    children: [\n      /* @__PURE__ */ jsx4(Button2, {\n        onClick: handlePopoverOpen,\n        children: \"Give Feedback\"\n      }),\n      /* @__PURE__ */ jsx4(Popover, {\n        anchorEl,\n        anchorOrigin: {\n          vertical: \"bottom\",\n          horizontal: \"right\"\n        },\n        disableRestoreFocus: true,\n        onClose: handlePopoverClose,\n        open,\n        transformOrigin: {\n          vertical: \"top\",\n          horizontal: \"right\"\n        },\n        children: /* @__PURE__ */ jsxs3(FeedbackContainer, {\n          children: [\n            /* @__PURE__ */ jsx4(FeedbackHeader, {\n              appName,\n              handleClose: handlePopoverClose,\n              loading,\n              sent\n            }),\n            /* @__PURE__ */ jsx4(FeedbackForm, {\n              analytics,\n              appName,\n              handleClose: handlePopoverClose,\n              loading,\n              setLoading,\n              setSent\n            })\n          ]\n        })\n      })\n    ]\n  });\n};\nexport {\n  Feedback\n};\n"],"names":["Badge","children","color","rest","jsx","MUIBadge","Checkbox","forwardRef","props","ref","MuiCheckbox","styled","ToggleButtonGroup","jsx2","MuiTypography","styled2","Container"],"mappings":"uaAGG,IAACA,EAAQ,CAAC,CAAE,SAAAC,EAAU,MAAAC,EAAQ,QAAS,GAAGC,CAAI,IAAuBC,EAAIC,EAAU,CACpF,MAAAH,EACA,GAAGC,EACH,SAAAF,CACF,CAAC,ECHDK,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IACAL,EAAAM,EAAA,CACA,GAAAF,EACA,IAAAC,EACA,KAAA,QACA,CAAA,CACA,oECOmBE,EAAOC,EAAmB,CAAE,KAAM,eAAgB,KAAM,MAAM,CAAE,EAAE,EAAE,EA2ItEL,EAAU,WACzB,CAAC,CAAE,SAAAN,EAAU,GAAGE,CAAI,EAAIM,IACCI,EAAKC,EAAe,CACzC,GAAGX,EACH,IAAAM,EACA,SAAAR,CACN,CAAK,CAEL,EAqCwBc,EAAQC,EAAW,CAAE,KAAM,oBAAqB,KAAM,MAAQ,CAAA,EAAE,CAAE,CAAA"}