{"version":3,"file":"Feedback.stories-d3ab3f66.js","sources":["../../../packages/popover/dist/index.mjs","../../../packages/tooltip/dist/index.mjs","../../../packages/feedback/src/lib/FeedbackForm.tsx","../../../packages/feedback/src/lib/FeedbackHeader.tsx","../../../packages/feedback/src/lib/Feedback.tsx"],"sourcesContent":["// src/lib/Popover.tsx\nimport { Popover as MuiPopover } from \"@mui/material\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Popover = ({ ...rest }) => {\n  return /* @__PURE__ */ jsx(MuiPopover, {\n    ...rest\n  });\n};\nexport {\n  Popover\n};\n","// src/lib/Tooltip.tsx\nimport { Tooltip as MuiTooltip } from \"@mui/material\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Tooltip = (props) => {\n  const { children, dangerouslySetTransitionTimer, ...rest } = props;\n  return /* @__PURE__ */ jsx(MuiTooltip, {\n    ...rest,\n    TransitionProps: { timeout: dangerouslySetTransitionTimer !== void 0 ? dangerouslySetTransitionTimer : 100 },\n    arrow: true,\n    children\n  });\n};\nexport {\n  Tooltip\n};\n","import React, { useEffect } from 'react';\nimport { TextField } from '@availity/mui-textfield';\nimport { LoadingButton, Button } from '@availity/mui-button';\nimport { ToggleButtonGroup, ToggleButton } from '@availity/mui-toggle-button';\nimport { Tooltip } from '@availity/mui-tooltip';\nimport { Grid, SvgIconProps, ToggleButtonProps, styled } from '@mui/material';\nimport { FaceFrownIcon, FaceNeutralIcon, FaceSmileIcon } from '@availity/mui-icon';\nimport { avRegionsApi } from '@availity/api-axios';\nimport { useForm, SubmitHandler, Controller } from 'react-hook-form';\n\ninterface Inputs {\n  feedback: string;\n  smileField: string;\n}\n\ninterface SmileButtonProps extends ToggleButtonProps {\n  disabled: boolean;\n  Icon: (props: SvgIconProps) => JSX.Element;\n  label: string;\n  value: string;\n}\n\ninterface FeedbackFormProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  analytics: { info: (entries: any) => any };\n  appName: string;\n  handleClose: () => void;\n  loading: boolean;\n  sent: boolean;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  setSent: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst SmileButtons = styled(ToggleButtonGroup, { name: 'AvFeedbackContainer', slot: 'SmileButtons' })({});\n\nconst SmileButton = ({ disabled, Icon, label, value, ...props }: SmileButtonProps) => (\n  <Tooltip title={label}>\n    <div>\n      <ToggleButton value={value} {...props} disabled={disabled}>\n        <Icon fontSize=\"large\" />\n      </ToggleButton>\n    </div>\n  </Tooltip>\n);\n\nexport const FeedbackForm = ({\n  analytics,\n  appName,\n  handleClose,\n  loading,\n  sent,\n  setLoading,\n  setSent,\n}: FeedbackFormProps): JSX.Element => {\n  const { control, handleSubmit, setValue, watch } = useForm<Inputs>();\n\n  const onSubmit: SubmitHandler<Inputs> = async ({ smileField, ...values }) => {\n    setLoading(true);\n    try {\n      const response = await avRegionsApi.getCurrentRegion();\n\n      await analytics.info({\n        surveyId: `${appName.replace(/\\s/g, '_')}_Smile_Survey`,\n        smileLocation: `${appName}`,\n        smile: `icon-${smileField}`,\n        url: window.location.href,\n        region: response.data.regions[0] && response.data.regions[0].id,\n        userAgent: window.navigator.userAgent,\n        submitTime: new Date(),\n        ...values, // Spread the form values onto the logger\n      });\n      setSent(true);\n      setLoading(false);\n    } catch {\n      setSent(false);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (sent) {\n      setTimeout(() => {\n        handleClose();\n      }, 2000);\n    }\n  }, [sent]);\n\n  const options = [\n    {\n      Icon: FaceSmileIcon,\n      label: 'What do you like?',\n      value: 'smile',\n    },\n    {\n      Icon: FaceNeutralIcon,\n      label: 'What would you improve?',\n      value: 'meh',\n    },\n    { Icon: FaceFrownIcon, label: \"What don't you like?\", value: 'frown' },\n  ];\n  return (\n    <Grid component=\"form\" container justifyContent=\"center\" onSubmit={handleSubmit(onSubmit)}>\n      <Controller\n        control={control}\n        name=\"smileField\"\n        render={({ field }) => {\n          return (\n            <SmileButtons\n              children={options.map((props) => (\n                <SmileButton disabled={loading} key={props.value} {...props} />\n              ))}\n              {...field}\n              onChange={(event: React.MouseEvent<HTMLElement>, value: string) => {\n                setValue(field.name, value);\n              }}\n              size=\"medium\"\n              exclusive\n            />\n          );\n        }}\n      />\n      <Controller\n        control={control}\n        name=\"feedback\"\n        render={({ field }) => (\n          <TextField\n            {...field}\n            fullWidth\n            multiline\n            minRows={3}\n            maxRows={3}\n            label=\"What would you improve?\"\n            disabled={loading}\n          />\n        )}\n        rules={{ maxLength: 200, required: true }}\n      />\n      <Grid container direction=\"row\" marginTop=\"8px\" spacing={1}>\n        <Grid item xs={6}>\n          <Button color=\"secondary\" disabled={loading} fullWidth>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <LoadingButton disabled={!watch('smileField')} fullWidth loading={loading} type=\"submit\" variant=\"contained\">\n            Send Feedback\n          </LoadingButton>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n","import { IconButton } from '@availity/mui-button';\nimport { CloseIcon } from '@availity/mui-icon';\nimport { Typography } from '@availity/mui-typography';\nimport { Grid } from '@mui/material';\n\ninterface FeedbackHeaderProps {\n  appName: string;\n  handleClose: () => void;\n  loading: boolean;\n  sent: boolean;\n}\n\nexport const FeedbackHeader = ({ appName, handleClose, loading, sent }: FeedbackHeaderProps): JSX.Element => {\n  return (\n    <Grid\n      alignItems=\"center\"\n      container\n      direction=\"row\"\n      marginBottom=\"8px\"\n      justifyContent=\"space-between\"\n      whiteSpace=\"nowrap\"\n    >\n      <Grid item width=\"\">\n        <Typography variant=\"h5\">\n          {sent ? 'Thank you for your feedback.' : `Tell us what you think about ${appName}`}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <IconButton disabled={loading} title=\"Close\" onClick={handleClose}>\n          <CloseIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n","import { useState } from 'react';\nimport { Popover } from '@availity/mui-popover';\nimport { Button } from '@availity/mui-button';\nimport { Container, styled } from '@mui/material';\nimport { avLogMessagesApi } from '@availity/api-axios';\nimport { FeedbackForm } from './FeedbackForm';\nimport { FeedbackHeader } from './FeedbackHeader';\n\nexport interface FeedbackProps {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  analytics?: { info: (entries: any) => any };\n  appName: string;\n}\n\nconst FeedbackContainer = styled(Container, { name: 'AvFeedbackContainer', slot: 'root' })({});\n\nexport const Feedback = ({ analytics = avLogMessagesApi, appName }: FeedbackProps): JSX.Element => {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [sent, setSent] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n\n  return (\n    <>\n      <Button onClick={handlePopoverOpen}>Give Feedback</Button>\n      <Popover\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'right',\n        }}\n        disableRestoreFocus\n        onClose={handlePopoverClose}\n        open={open}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n      >\n        <FeedbackContainer>\n          <FeedbackHeader appName={appName} handleClose={handlePopoverClose} loading={loading} sent={sent} />\n          <FeedbackForm\n            analytics={analytics}\n            appName={appName}\n            handleClose={handlePopoverClose}\n            loading={loading}\n            sent={sent}\n            setLoading={setLoading}\n            setSent={setSent}\n          />\n        </FeedbackContainer>\n      </Popover>\n    </>\n  );\n};\n"],"names":["Popover","rest","jsx","MuiPopover","Tooltip","props","children","dangerouslySetTransitionTimer","MuiTooltip","SmileButtons","styled","ToggleButtonGroup","SmileButton","disabled","Icon","label","value","ToggleButton","FeedbackForm","analytics","appName","handleClose","loading","sent","setLoading","setSent","control","handleSubmit","setValue","watch","useForm","onSubmit","smileField","values","response","avRegionsApi","useEffect","options","FaceSmileIcon","FaceNeutralIcon","FaceFrownIcon","jsxs","Grid","Controller","field","event","TextField","Button","LoadingButton","FeedbackHeader","Typography","IconButton","CloseIcon","FeedbackContainer","Container","Feedback","avLogMessagesApi","anchorEl","setAnchorEl","useState","handlePopoverOpen","handlePopoverClose","Fragment"],"mappings":"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"}