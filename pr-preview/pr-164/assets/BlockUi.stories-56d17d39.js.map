{"version":3,"file":"BlockUi.stories-56d17d39.js","sources":["../../../packages/block-ui/src/lib/BlockUi.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState, isValidElement } from 'react';\nimport type { ElementType, KeyboardEvent, KeyboardEventHandler, ReactNode } from 'react';\nimport { CircularProgress } from '@mui/material';\n\nimport './BlockUi.css';\n\nconst Loader = () => {\n  return <CircularProgress aria-label=\"Loading\" variant=\"indeterminate\" />;\n};\n\nexport type BlockUiProps = {\n  /** Set whether the component should block its children */\n  blocking?: boolean;\n  /** children to display */\n  children?: ReactNode;\n  /** CSS class name to pass to component */\n  className?: string;\n  /** Set whether the blocking component should follow the scroll or stay at a fixed postion */\n  keepInView?: boolean;\n  /** Loader component to use */\n  loader?: JSX.Element;\n  /** The message to display. Can also be a component. */\n  message?: string | ReactNode;\n  /** Control if the children are shown when the component is being blocked */\n  renderChildren?: boolean;\n  /** tag to render as container element */\n  tag?: ElementType;\n};\n\nexport function BlockUi({\n  blocking,\n  children,\n  className = '',\n  keepInView,\n  loader = <Loader />,\n  message,\n  renderChildren = true,\n  tag: Tag = 'div',\n  ...rest\n}: BlockUiProps): JSX.Element {\n  const [top, setTop] = useState<string | number>('50%');\n\n  const blockerRef = useRef<HTMLDivElement>(null);\n  const topFocusRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const messageContainerRef = useRef<HTMLDivElement>(null);\n\n  const handleKeepInView = useCallback(() => {\n    if (blocking && keepInView && containerRef.current) {\n      const containerBounds = containerRef.current.getBoundingClientRect();\n      const windowHeight = window.innerHeight;\n\n      if (containerBounds.top > windowHeight || containerBounds.bottom < 0) return;\n\n      if (containerBounds.top >= 0 && containerBounds.bottom <= windowHeight) {\n        if (top !== '50%') {\n          setTop('50%');\n        }\n        return;\n      }\n\n      const messageBoundsHeight = messageContainerRef.current\n        ? messageContainerRef.current.getBoundingClientRect().height\n        : 0;\n\n      let newTop =\n        Math.max(\n          Math.min(windowHeight, containerBounds.bottom) - Math.max(containerBounds.top, 0),\n          messageBoundsHeight\n        ) / 2;\n\n      if (containerBounds.top < 0) {\n        newTop = Math.min(newTop - containerBounds.top, containerBounds.height - messageBoundsHeight / 2);\n      }\n\n      if (top !== newTop) {\n        setTop(newTop);\n      }\n    }\n  }, [blocking, keepInView, top]);\n\n  // Add/Remove event listeners with handleKeepInView\n  useEffect(() => {\n    window.addEventListener('scroll', handleKeepInView);\n\n    return () => {\n      window.removeEventListener('scroll', handleKeepInView);\n    };\n  }, [handleKeepInView]);\n\n  const blockingTab = (event: KeyboardEvent<HTMLDivElement>, withShift = false) => {\n    const { key, shiftKey } = event;\n\n    return blocking && key === 'Tab' && shiftKey === withShift;\n  };\n\n  const tabbedUpTop: KeyboardEventHandler<HTMLDivElement> = (event) => {\n    if (blockerRef.current && blockingTab(event)) {\n      blockerRef.current.focus();\n    }\n  };\n\n  const tabbedDownTop: KeyboardEventHandler<HTMLDivElement> = (event) => {\n    if (blockerRef.current && blockingTab(event)) {\n      event.preventDefault();\n      blockerRef.current.focus();\n    }\n  };\n\n  const tabbedUpBottom: KeyboardEventHandler<HTMLDivElement> = (event) => {\n    if (topFocusRef.current && blockingTab(event, true)) {\n      topFocusRef.current.focus();\n    }\n  };\n\n  const tabbedDownBottom: KeyboardEventHandler<HTMLDivElement> = (event) => {\n    if (topFocusRef.current && blockingTab(event, true)) {\n      event.preventDefault();\n      topFocusRef.current.focus();\n    }\n  };\n\n  // Render children when not blocking or renderChildren is true\n  const shouldRenderChildren = !blocking || renderChildren;\n\n  return (\n    <Tag className={blocking ? `block-ui ${className}` : className} aria-busy={blocking} {...rest}>\n      {blocking ? (\n        <div tabIndex={0} onKeyUp={tabbedUpTop} onKeyDown={tabbedDownTop} ref={topFocusRef} className=\"sr-only\">\n          {message || 'loading'}\n        </div>\n      ) : null}\n      {shouldRenderChildren ? children : null}\n      {blocking ? (\n        <div\n          className=\"block-ui-container\"\n          tabIndex={0}\n          ref={blockerRef}\n          onKeyUp={tabbedUpBottom}\n          onKeyDown={tabbedDownBottom}\n        >\n          <div className=\"block-ui-overlay\" ref={containerRef} />\n          <div\n            className=\"block-ui-message-container\"\n            ref={messageContainerRef}\n            style={{ top: keepInView ? top : undefined }}\n          >\n            <div className=\"block-ui-message\">\n              {isValidElement(loader) ? <div aria-hidden>{loader}</div> : null}\n              {message || <div className=\"sr-only\">loading</div>}\n            </div>\n          </div>\n        </div>\n      ) : null}\n    </Tag>\n  );\n}\n"],"names":["Loader","jsx","CircularProgress","BlockUi","blocking","children","className","keepInView","loader","message","renderChildren","Tag","rest","top","setTop","useState","blockerRef","useRef","topFocusRef","containerRef","messageContainerRef","handleKeepInView","useCallback","containerBounds","windowHeight","messageBoundsHeight","newTop","useEffect","blockingTab","event","withShift","key","shiftKey","tabbedUpTop","tabbedDownTop","tabbedUpBottom","tabbedDownBottom","shouldRenderChildren","jsxs","isValidElement"],"mappings":"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"}