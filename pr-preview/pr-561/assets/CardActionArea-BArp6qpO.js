import{j as i}from"./jsx-runtime-CcL-W3nW.js";import{r as y}from"./index-DcWiA9TO.js";import{g as b,c as l}from"./generateUtilityClass-CVWqFxsA.js";import{m as u}from"./memoTheme-D-rVhYRp.js";import{g}from"./generateUtilityClasses-BGOCnVj7.js";import{u as C}from"./DefaultPropsProvider-_cNB_dWy.js";import{s as d,c as A}from"./styled-CF1hcdwO.js";import{B as v}from"./ButtonBase-DbVRbsLs.js";function V(e){return b("MuiCardActionArea",e)}const o=g("MuiCardActionArea",["root","focusVisible","focusHighlight"]),x=e=>{const{classes:t}=e;return A({root:["root"],focusHighlight:["focusHighlight"]},V,t)},q=d(v,{name:"MuiCardActionArea",slot:"Root",overridesResolver:(e,t)=>t.root})(u(({theme:e})=>({display:"block",textAlign:"inherit",borderRadius:"inherit",width:"100%",[`&:hover .${o.focusHighlight}`]:{opacity:(e.vars||e).palette.action.hoverOpacity,"@media (hover: none)":{opacity:0}},[`&.${o.focusVisible} .${o.focusHighlight}`]:{opacity:(e.vars||e).palette.action.focusOpacity}}))),w=d("span",{name:"MuiCardActionArea",slot:"FocusHighlight",overridesResolver:(e,t)=>t.focusHighlight})(u(({theme:e})=>({overflow:"hidden",pointerEvents:"none",position:"absolute",top:0,right:0,bottom:0,left:0,borderRadius:"inherit",opacity:0,backgroundColor:"currentcolor",transition:e.transitions.create("opacity",{duration:e.transitions.duration.short})}))),N=y.forwardRef(function(t,r){const n=C({props:t,name:"MuiCardActionArea"}),{children:p,className:f,focusVisibleClassName:m,...h}=n,s=n,a=x(s);return i.jsxs(q,{className:l(a.root,f),focusVisibleClassName:l(m,a.focusVisible),ref:r,ownerState:s,...h,children:[p,i.jsx(w,{className:a.focusHighlight,ownerState:s})]})}),c=({children:e,...t})=>i.jsx(N,{...t,disableRipple:!0,children:e});try{c.displayName="CardActionArea",c.__docgenInfo={description:"",displayName:"CardActionArea",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<CardActionAreaClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLButtonElement>"}},tabIndex:{defaultValue:{value:"0"},description:"",name:"tabIndex",required:!1,type:{name:"number"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}}}}}catch{}export{c as C};
