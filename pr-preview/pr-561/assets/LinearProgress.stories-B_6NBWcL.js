import{j as e}from"./jsx-runtime-CcL-W3nW.js";import{S as l}from"./index-BDqO7SwG.js";import{S as d,B as u}from"./index-Dnj5y9bu.js";import{T as c}from"./index-Bssefeeu.js";import{L as f}from"./LinearProgress-CMMmg-Du.js";import"./index-DcWiA9TO.js";import"./_commonjsHelpers-BosuxZz1.js";import"./faUser-CAcveCor.js";import"./SvgIcon-DfAk99tL.js";import"./generateUtilityClass-DELP8s2G.js";import"./identifier-CenlGZaM.js";import"./memoTheme-CIpOTVoB.js";import"./styled-wZqJTO_n.js";import"./DefaultPropsProvider-LCKMq1Iv.js";import"./generateUtilityClasses-duJ5YrlI.js";import"./Box-DR5TX31P.js";import"./useTheme-DwYC2ms6.js";import"./extendSxProp-w61GJfY-.js";import"./Grid2-CHb9J3Cd.js";import"./useTheme-Cf-RAc4Y.js";import"./styled-CIC6PLSI.js";import"./isMuiElement-DAzOCCHH.js";import"./useThemeProps-BAwiOWAz.js";import"./Stack-BPYMGdgv.js";import"./Container-7wpQgvnn.js";import"./Typography-Dw3TlP36.js";import"./index-BKNdG2lN.js";import"./emotion-react.browser.esm-BKUJyPAt.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./index-nos-0K8U.js";const s=({variant:r="determinate",value:t=0,sx:m,...p})=>e.jsxs(d,{direction:"row",sx:{alignItems:"center"},children:[e.jsx(u,{sx:{width:"100%",mr:.5},children:e.jsx(f,{variant:r,...p,value:t,color:"success",sx:{width:"100%",...m}})}),t===100&&e.jsx(l,{color:"success","data-icon":"complete"}),e.jsx(c,{variant:"body2",sx:{color:"text.secondary",ml:1},children:`${Math.round(t)}%`})]});try{s.displayName="LinearProgress",s.__docgenInfo={description:"",displayName:"LinearProgress",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<LinearProgressClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},value:{defaultValue:{value:"0"},description:`The value of the progress indicator for the determinate and buffer variants.
Value between 0 and 100.`,name:"value",required:!1,type:{name:"number"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},variant:{defaultValue:{value:"determinate"},description:`The variant to use.
Use indeterminate or query when there is no progress value.`,name:"variant",required:!1,type:{name:'OverridableStringUnion<"indeterminate" | "determinate" | "buffer" | "query", LinearProgressPropsVariantOverrides>'}},valueBuffer:{defaultValue:null,description:`The value for the buffer variant.
Value between 0 and 100.`,name:"valueBuffer",required:!1,type:{name:"number"}}}}}catch{}const G={title:"Components/Progress/LinearProgress",component:s,tags:["autodocs"]},a={render:r=>e.jsx(s,{...r}),args:{value:50,"aria-label":"example-progress-bar"}};var o,i,n;a.parameters={...a.parameters,docs:{...(o=a.parameters)==null?void 0:o.docs,source:{originalSource:`{
  render: (args: LinearProgressProps) => <LinearProgress {...args} />,
  args: {
    value: 50,
    'aria-label': 'example-progress-bar'
  }
}`,...(n=(i=a.parameters)==null?void 0:i.docs)==null?void 0:n.source}}};const H=["_LinearProgress"];export{a as _LinearProgress,H as __namedExportsOrder,G as default};
