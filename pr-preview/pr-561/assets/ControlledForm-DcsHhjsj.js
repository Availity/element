import{j as n}from"./jsx-runtime-CcL-W3nW.js";import{u,F as m}from"./index.esm-CE2LouoS.js";const s=({onSubmit:e,values:i,schema:r,validationResolver:o,...l})=>{const t={values:i};r&&o&&(t.resolver=o(r));const a=u(t);return n.jsx(m,{...a,children:n.jsx("form",{onSubmit:a.handleSubmit(e),noValidate:!0,...l})})};try{s.displayName="ControlledForm",s.__docgenInfo={description:"",displayName:"ControlledForm",props:{onSubmit:{defaultValue:null,description:"This function will receive the form data if form validation is successful.",name:"onSubmit",required:!1,type:{name:"SubmitHandler<any> & FormEventHandler<HTMLFormElement>"}},values:{defaultValue:null,description:"Reactive values to update the form values.",name:"values",required:!0,type:{name:"Record<string, any>"}},schema:{defaultValue:null,description:"The schema used by the validationResolver.",name:"schema",required:!1,type:{name:"unknown"}},validationResolver:{defaultValue:null,description:`Integrates with your preferred schema validation library.
More information on react-hook-form's resolvers can be
found here: https://github.com/react-hook-form/resolvers#quickstart`,name:"validationResolver",required:!1,type:{name:"(schema: unknown) => Resolver"}}}}}catch{}export{s as C};
