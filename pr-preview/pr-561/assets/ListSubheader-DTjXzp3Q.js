import{j as a}from"./jsx-runtime-CcL-W3nW.js";import{a as T,L as V}from"./List-BRpAtMOZ.js";import{r as l}from"./index-DcWiA9TO.js";import{L as v}from"./ListItem-CJcz4w1g.js";import{g as q,c as x}from"./generateUtilityClass-DELP8s2G.js";import{g as L}from"./generateUtilityClasses-duJ5YrlI.js";import{u as S}from"./DefaultPropsProvider-LCKMq1Iv.js";import{s as d,c as _}from"./styled-wZqJTO_n.js";import{b as P,a as C,L as w}from"./ListItemText-BZBLOBmg.js";import{u as R}from"./useThemeProps-CsOQpjjJ.js";import{L as N}from"./ListSubheader-3rOeDSM0.js";function A(e){return q("MuiListItemAvatar",e)}L("MuiListItemAvatar",["root","alignItemsFlexStart"]);const k=e=>{const{alignItems:t,classes:s}=e;return _({root:["root",t==="flex-start"&&"alignItemsFlexStart"]},A,s)},E=d("div",{name:"MuiListItemAvatar",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:s}=e;return[t.root,s.alignItems==="flex-start"&&t.alignItemsFlexStart]}})({minWidth:56,flexShrink:0,variants:[{props:{alignItems:"flex-start"},style:{marginTop:8}}]}),M=l.forwardRef(function(t,s){const n=S({props:t,name:"MuiListItemAvatar"}),{className:i,...o}=n,p=l.useContext(T),r={...n,alignItems:p.alignItems},I=k(r);return a.jsx(E,{className:x(I.root,i),ownerState:r,ref:s,...o})}),u=({children:e,...t})=>a.jsx(V,{...t,children:e});try{u.displayName="List",u.__docgenInfo={description:"Wrapper for list items. Renders as a `<ul>` by default.",displayName:"List",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListClasses> & Partial<ClassNameMap<never>>"}},dense:{defaultValue:{value:"false"},description:"If `true`, compact vertical padding designed for keyboard and mouse input is used for\nthe list and list items.\nThe prop is available to descendant components as the `dense` context.",name:"dense",required:!1,type:{name:"boolean"}},disablePadding:{defaultValue:{value:"false"},description:"If `true`, vertical padding is removed from the list.",name:"disablePadding",required:!1,type:{name:"boolean"}},subheader:{defaultValue:null,description:"The content of the subheader, normally `ListSubheader`.",name:"subheader",required:!1,type:{name:"ReactNode"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLUListElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}const m=l.forwardRef((e,t)=>a.jsx(v,{...e,ref:t}));try{m.displayName="ListItem",m.__docgenInfo={description:"A common list item. Renders as an `<li>` by default.",displayName:"ListItem",props:{slotProps:{defaultValue:{value:"{}"},description:`The extra props for the slot components.
You can override the existing props or add new ones.`,name:"slotProps",required:!1,type:{name:"{ root?: HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides; }"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemClasses> & Partial<ClassNameMap<never>>"}},children:{defaultValue:null,description:"The content of the component if a `ListItemSecondaryAction` is used it must\nbe the last child.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"{ root?: ElementType<any, keyof IntrinsicElements>; }"}},alignItems:{defaultValue:{value:"'center'"},description:"Defines the `align-items` style property.",name:"alignItems",required:!1,type:{name:'"center" | "flex-start"'}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},dense:{defaultValue:{value:"false"},description:"If `true`, compact vertical padding designed for keyboard and mouse input is used.\nThe prop defaults to the value inherited from the parent List component.",name:"dense",required:!1,type:{name:"boolean"}},divider:{defaultValue:{value:"false"},description:"If `true`, a 1px light border is added to the bottom of the list item.",name:"divider",required:!1,type:{name:"boolean"}},disableGutters:{defaultValue:{value:"false"},description:"If `true`, the left and right padding is removed.",name:"disableGutters",required:!1,type:{name:"boolean"}},disablePadding:{defaultValue:{value:"false"},description:"If `true`, all padding is removed.",name:"disablePadding",required:!1,type:{name:"boolean"}},secondaryAction:{defaultValue:null,description:"The element to display at the end of ListItem.",name:"secondaryAction",required:!1,type:{name:"ReactNode"}}}}}catch{}const c=({children:e,...t})=>a.jsx(M,{...t,children:e});try{c.displayName="ListItemAvatar",c.__docgenInfo={description:"Avatar to be used inside of a list item.",displayName:"ListItemAvatar",props:{children:{defaultValue:null,description:"The content of the component, normally an `Avatar`.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemAvatarClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}const f=l.forwardRef((e,t)=>a.jsx(P,{...e,ref:t}));try{f.displayName="ListItemButton",f.__docgenInfo={description:"Action element to be used inside a list item.",displayName:"ListItemButton",props:{component:{defaultValue:null,description:`The component used for the root node.
Either a string to use a HTML element or a component.`,name:"component",required:!0,type:{name:"ElementType<any, keyof IntrinsicElements>"}},alignItems:{defaultValue:{value:"'center'"},description:"Defines the `align-items` style property.",name:"alignItems",required:!1,type:{name:'"center" | "flex-start"'}},autoFocus:{defaultValue:{value:"false"},description:"If `true`, the list item is focused during the first mount.\nFocus will also be triggered if the value changes from false to true.",name:"autoFocus",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The content of the component if a `ListItemSecondaryAction` is used it must\nbe the last child.\nThe content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemButtonClasses> & Partial<ClassNameMap<never>>"}},dense:{defaultValue:{value:"false"},description:"If `true`, compact vertical padding designed for keyboard and mouse input is used.\nThe prop defaults to the value inherited from the parent List component.",name:"dense",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:`false
false`},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disableGutters:{defaultValue:{value:"false"},description:"If `true`, the left and right padding is removed.",name:"disableGutters",required:!1,type:{name:"boolean"}},divider:{defaultValue:{value:"false"},description:"If `true`, a 1px light border is added to the bottom of the list item.",name:"divider",required:!1,type:{name:"boolean"}},selected:{defaultValue:{value:"false"},description:"Use to apply selected styling.",name:"selected",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},tabIndex:{defaultValue:{value:"0"},description:"",name:"tabIndex",required:!1,type:{name:"number"}},action:{defaultValue:null,description:"A ref for imperative actions.\nIt currently only supports `focusVisible()` action.",name:"action",required:!1,type:{name:"Ref<ButtonBaseActions>"}},centerRipple:{defaultValue:{value:"false"},description:"If `true`, the ripples are centered.\nThey won't start at the cursor interaction position.",name:"centerRipple",required:!1,type:{name:"boolean"}},disableRipple:{defaultValue:{value:"false"},description:"If `true`, the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the `.Mui-focusVisible` class.",name:"disableRipple",required:!1,type:{name:"boolean"}},disableTouchRipple:{defaultValue:{value:"false"},description:"If `true`, the touch ripple effect is disabled.",name:"disableTouchRipple",required:!1,type:{name:"boolean"}},focusRipple:{defaultValue:{value:"false"},description:"If `true`, the base button will have a keyboard focus ripple.",name:"focusRipple",required:!1,type:{name:"boolean"}},focusVisibleClassName:{defaultValue:null,description:`This prop can help identify which element has keyboard focus.
The class name will be applied when the element gains the focus through keyboard interaction.
It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a \`focus-visible\` class to other components
if needed.`,name:"focusVisibleClassName",required:!1,type:{name:"string"}},LinkComponent:{defaultValue:{value:"'a'"},description:"The component used to render a link when the `href` prop is provided.",name:"LinkComponent",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},onFocusVisible:{defaultValue:null,description:"Callback fired when the component is focused with a keyboard.\nWe trigger a `onFocus` callback too.",name:"onFocusVisible",required:!1,type:{name:"FocusEventHandler<any>"}},TouchRippleProps:{defaultValue:null,description:"Props applied to the `TouchRipple` element.",name:"TouchRippleProps",required:!1,type:{name:"Partial<TouchRippleProps>"}},touchRippleRef:{defaultValue:null,description:"A ref that points to the `TouchRipple` element.",name:"touchRippleRef",required:!1,type:{name:"Ref<TouchRippleActions>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}}}catch{}const y=({children:e,...t})=>a.jsx(C,{...t,children:e});try{y.displayName="ListItemIcon",y.__docgenInfo={description:"Icon to be used inside of a list item",displayName:"ListItemIcon",props:{children:{defaultValue:null,description:"The content of the component, normally `Icon`, `SvgIcon`,\nor a `@mui/icons-material` SVG icon element.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemIconClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}}}}}catch{}const j=d(v,{name:"AvListItemStatusCard",slot:"root",overridesResolver:(e,t)=>[t.root,e.color&&t.color]})(({theme:e,ownerState:t})=>({backgroundColor:e.palette.background.paper,border:`1px solid ${e.palette.divider}`,borderRadius:"4px",marginBottom:"4px",paddingLeft:"8px","&.MuiListItem-padding.MuiListItem-gutters":{paddingLeft:"calc(16px + 8px)"},...t.color&&t.color!=="default"&&{".AvListItemStatusCard-statusAccent":{backgroundColor:`${e.palette[t.color].main}`}}})),F=d("div",{name:"AvListItemStatusCard",slot:"statusAccent",overridesResolver:(e,t)=>[t.statusAccent,e.color&&t.color]})(({theme:e})=>({position:"absolute",left:0,top:0,height:"100%",width:"8px",backgroundColor:e.palette.divider,backgroundClip:"border-box",borderTopLeftRadius:"3px",borderBottomLeftRadius:"3px",content:"''"})),h=l.forwardRef((e,t)=>{const{alignItems:s="flex-start",children:n,color:i,...o}=e,r={...R({props:e,name:"AvListItemStatusCard"}),color:i};return a.jsxs(j,{alignItems:s,divider:!1,ownerState:r,...o,ref:t,children:[a.jsx(F,{className:"AvListItemStatusCard-statusAccent"}),n]})});try{h.displayName="ListItemStatusCard",h.__docgenInfo={description:"A list item with card styling and status accent. Should always be used with corresponding child `StatusChip` to explain status without relying on color for accessibility.\n\nRenders as an `<li>` by default.",displayName:"ListItemStatusCard",props:{slotProps:{defaultValue:{value:"{}"},description:`The extra props for the slot components.
You can override the existing props or add new ones.`,name:"slotProps",required:!1,type:{name:"{ root?: HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides; }"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemClasses> & Partial<ClassNameMap<never>>"}},children:{defaultValue:null,description:"The content of the component if a `ListItemSecondaryAction` is used it must\nbe the last child.",name:"children",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},color:{defaultValue:null,description:"Color of status accent. Should match child `StatusChip`.",name:"color",required:!1,type:{name:'"primary" | "secondary" | "error" | "info" | "success" | "warning" | "default"'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"{ root?: ElementType<any, keyof IntrinsicElements>; }"}},alignItems:{defaultValue:{value:"'center'"},description:"Defines the `align-items` style property.",name:"alignItems",required:!1,type:{name:'"center" | "flex-start"'}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},dense:{defaultValue:{value:"false"},description:"If `true`, compact vertical padding designed for keyboard and mouse input is used.\nThe prop defaults to the value inherited from the parent List component.",name:"dense",required:!1,type:{name:"boolean"}},disableGutters:{defaultValue:{value:"false"},description:"If `true`, the left and right padding is removed.",name:"disableGutters",required:!1,type:{name:"boolean"}},disablePadding:{defaultValue:{value:"false"},description:"If `true`, all padding is removed.",name:"disablePadding",required:!1,type:{name:"boolean"}},secondaryAction:{defaultValue:null,description:"The element to display at the end of ListItem.",name:"secondaryAction",required:!1,type:{name:"ReactNode"}}}}}catch{}const g=({children:e,...t})=>a.jsx(w,{...t,children:e});try{g.displayName="ListItemText",g.__docgenInfo={description:"Container inside a list item, used to display text content.",displayName:"ListItemText",props:{children:{defaultValue:null,description:"Alias for the `primary` prop.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListItemTextClasses>"}},disableTypography:{defaultValue:{value:"false"},description:"If `true`, the children won't be wrapped by a Typography component.\nThis can be useful to render an alternative Typography variant by wrapping\nthe `children` (or `primary`) text, and optional `secondary` text\nwith the Typography component.",name:"disableTypography",required:!1,type:{name:"boolean"}},inset:{defaultValue:{value:"false"},description:"If `true`, the children are indented.\nThis should be used if there is no left avatar or left icon.",name:"inset",required:!1,type:{name:"boolean"}},primary:{defaultValue:null,description:"The main content element.",name:"primary",required:!1,type:{name:"ReactNode"}},primaryTypographyProps:{defaultValue:null,description:"These props will be forwarded to the primary typography component\n(as long as disableTypography is not `true`).\n@deprecated Use `slotProps.primary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"primaryTypographyProps",required:!1,type:{name:'TypographyProps<"span", { component?: "span"; }>'}},secondary:{defaultValue:null,description:"The secondary content element.",name:"secondary",required:!1,type:{name:"ReactNode"}},secondaryTypographyProps:{defaultValue:null,description:"These props will be forwarded to the secondary typography component\n(as long as disableTypography is not `true`).\n@deprecated Use `slotProps.secondary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.",name:"secondaryTypographyProps",required:!1,type:{name:'TypographyProps<"p", { component?: "p"; }>'}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<ListItemTextSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:"{ primary?: SlotProps<ElementType<TypographyProps, keyof IntrinsicElements>, {}, ListItemTextOwnerState>; secondary?: SlotProps<...>; }"}}}}}catch{}const b=({children:e,...t})=>a.jsx(N,{...t,children:e});try{b.displayName="ListSubheader",b.__docgenInfo={description:"A label for a nested list.",displayName:"ListSubheader",props:{children:{defaultValue:null,description:"The content of the component.",name:"children",required:!1,type:{name:"ReactNode"}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<ListSubheaderClasses> & Partial<ClassNameMap<never>>"}},color:{defaultValue:{value:"'default'"},description:"The color of the component. It supports those theme colors that make sense for this component.",name:"color",required:!1,type:{name:'"inherit" | "primary" | "default"'}},disableGutters:{defaultValue:{value:"false"},description:"If `true`, the List Subheader will not have gutters.",name:"disableGutters",required:!1,type:{name:"boolean"}},disableSticky:{defaultValue:{value:"false"},description:"If `true`, the List Subheader will not stick to the top during scroll.",name:"disableSticky",required:!1,type:{name:"boolean"}},inset:{defaultValue:{value:"false"},description:"If `true`, the List Subheader is indented.",name:"inset",required:!1,type:{name:"boolean"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<HTMLLIElement>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}export{u as L,m as a,g as b,f as c,y as d,b as e,c as f,h as g};
