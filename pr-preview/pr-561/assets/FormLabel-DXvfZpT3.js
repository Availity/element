import{j as t}from"./jsx-runtime-CcL-W3nW.js";import{r as p}from"./index-DcWiA9TO.js";import{F as u}from"./FieldHelpIcon-DTl8sWlS.js";import{s as m}from"./styled-CF1hcdwO.js";import{F as c}from"./FormControlLabel-GqYWwHWT.js";import{B as f}from"./Box-DWnb8VZB.js";import{F as h}from"./FormLabel-98YPf6ct.js";const b=m(f,{name:"MuiFormControlLabel",slot:"AvWrapper",overridesResolver:(e,a)=>a.avWrapper})({}),i=p.forwardRef(({helpTopicId:e,id:a,sx:n,...r},o)=>{const l=a||(r.htmlFor?`${r.htmlFor}-label`:void 0);return t.jsxs(b,{className:"MuiFormControlLabel-avWrapper",sx:n,ref:o,children:[t.jsx(c,{id:l,...r}),e?t.jsx(u,{helpTopicId:"12345",labelId:l}):null]})});try{i.displayName="FormControlLabel",i.__docgenInfo={description:"",displayName:"FormControlLabel",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormControlLabelClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},label:{defaultValue:null,description:"A text or an element to be used in an enclosing label element.",name:"label",required:!0,type:{name:"ReactNode"}},onChange:{defaultValue:null,description:"Callback fired when the state is changed.\n@param event The event source of the callback.\nYou can pull out the new checked state by accessing `event.target.checked` (boolean).",name:"onChange",required:!1,type:{name:"(event: SyntheticEvent<Element, Event>, checked: boolean) => void"}},disabled:{defaultValue:null,description:"If `true`, the control is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},slots:{defaultValue:{value:"{}"},description:"The components used for each slot inside.",name:"slots",required:!1,type:{name:"Partial<FormControlLabelSlots>"}},slotProps:{defaultValue:{value:"{}"},description:"The props used for each slot inside.",name:"slotProps",required:!1,type:{name:'{ typography?: SlotProps<OverridableComponent<TypographyTypeMap<{}, "span">>, {}, FormControlLabelProps>; }'}},name:{defaultValue:null,description:"",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the component.",name:"value",required:!1,type:{name:"unknown"}},required:{defaultValue:null,description:"If `true`, adds required to control. (No required asterisk on individual controls in the group)",name:"required",required:!1,type:{name:"boolean"}},helpTopicId:{defaultValue:null,description:"Adds `FieldHelpIcon` next to the label (should not be within label for accessibility). Should only be used with `end` `labelPlacement`.",name:"helpTopicId",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},control:{defaultValue:null,description:"A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.",name:"control",required:!0,type:{name:"ReactElement<unknown, any>"}},checked:{defaultValue:null,description:"If `true`, the component appears selected.",name:"checked",required:!1,type:{name:"boolean"}},disableTypography:{defaultValue:null,description:"If `true`, the label is rendered as it is passed without an additional typography node.",name:"disableTypography",required:!1,type:{name:"boolean"}},labelPlacement:{defaultValue:{value:"'end'"},description:"The position of the label.",name:"labelPlacement",required:!1,type:{name:'"top" | "bottom" | "end" | "start"'}}}}}catch{}const y=m("div",{name:"MuiFormLabel",slot:"AvWrapper",overridesResolver:(e,a)=>a.avWrapper})({}),v={position:"relative !important",transform:"none !important",transition:"none !important",animation:"none !important"},d=p.forwardRef((e,a)=>{const{helpTopicId:n,id:r,sx:o,...l}=e,s=r||(l.htmlFor?`${l.htmlFor}-label`:void 0);return t.jsxs(y,{className:"MuiFormLabel-avWrapper",sx:o,children:[t.jsx(h,{id:s,sx:{...v},...l,ref:a}),n?t.jsx(u,{helpTopicId:n,labelId:s,sx:{px:.5}}):null]})});try{d.displayName="FormLabel",d.__docgenInfo={description:"",displayName:"FormLabel",props:{classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<FormLabelClasses> & Partial<ClassNameMap<never>>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}},error:{defaultValue:null,description:"If `true`, the label is displayed in an error state.",name:"error",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If `true`, the label should be displayed in a disabled state.",name:"disabled",required:!1,type:{name:"boolean"}},filled:{defaultValue:null,description:"If `true`, the label should use filled classes key.",name:"filled",required:!1,type:{name:"boolean"}},focused:{defaultValue:null,description:"If `true`, the input of this label is focused (used by `FormGroup` components).",name:"focused",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:"If `true`, the label will indicate that the `input` is required.",name:"required",required:!1,type:{name:"boolean"}},helpTopicId:{defaultValue:null,description:"Adds `FieldHelpIcon` next to the label (should not be within label for accessibility)",name:"helpTopicId",required:!1,type:{name:"string"}}}}}catch{}export{d as F,i as a};
