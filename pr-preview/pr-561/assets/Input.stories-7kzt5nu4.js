import{j as e}from"./jsx-runtime-CcL-W3nW.js";import{g as C}from"./index-DJ-An7_D.js";import{C as w,a as s}from"./index.esm-CE2LouoS.js";import{C as E}from"./ControlledForm-DcsHhjsj.js";import{B as m}from"./index-Cc5uDiTV.js";import{P as L}from"./index-BrWjJmRs.js";import{T as R}from"./index-BtPDELIe.js";import{G as j}from"./index-Cyp_3NIz.js";import"./index-DcWiA9TO.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-DMWJB0MK.js";import"./index-C_7pZhMU.js";import"./faUser-CAcveCor.js";import"./SvgIcon-DSdWmKAH.js";import"./generateUtilityClass-CVWqFxsA.js";import"./identifier-Dtqimryx.js";import"./memoTheme-D-rVhYRp.js";import"./styled-CF1hcdwO.js";import"./DefaultPropsProvider-_cNB_dWy.js";import"./generateUtilityClasses-BGOCnVj7.js";import"./faCheck-B05F4ORy.js";import"./Select-CuiA9glH.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-68oiojFJ.js";import"./Menu-Byu17A6t.js";import"./index-nos-0K8U.js";import"./useSlotProps-BAIpVL6Y.js";import"./resolveComponentProps-Dg20wxiM.js";import"./useForkRef-BVrIj09m.js";import"./Popover-ChEuM7rO.js";import"./isHostComponent-DVu5iVWx.js";import"./useSlot-DnkSxE3X.js";import"./Portal-CBAx_nZm.js";import"./useTheme-DUkCvbx_.js";import"./useTheme-C2CrmYKc.js";import"./utils-D5ZkK9XY.js";import"./objectWithoutPropertiesLoose-CAYKN5F1.js";import"./TransitionGroupContext-D-IBNIfW.js";import"./index-BEx9gAkE.js";import"./useTimeout-B8wmcRZV.js";import"./useEnhancedEffect-D2f2tbda.js";import"./getReactElementRef-AnOffBoZ.js";import"./ownerDocument-DW-IO8s5.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Paper-DXcIEVia.js";import"./Modal-B5s0Thvt.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Backdrop-B4gbyDGC.js";import"./Fade-Dl4gmST4.js";import"./List-ChBzRQcW.js";import"./utils-DoM3o7-Q.js";import"./useControlled-WdbyInBW.js";import"./useId-DszduLV4.js";import"./createSvgIcon-TketyoFF.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./OutlinedInput-DG7lKq6G.js";import"./index-f0Aa_BgU.js";import"./extendSxProp-B5AgUjQT.js";import"./emotion-react.browser.esm-CU7ej9d2.js";import"./FormLabel-98YPf6ct.js";import"./FormControlLabel-GqYWwHWT.js";import"./Typography-CvSvtD2a.js";import"./Switch-BqVUWLaW.js";import"./SwitchBase-Z9YgLJlx.js";import"./ButtonBase-DbVRbsLs.js";import"./isFocusVisible-B8k4qzLc.js";import"./RadioGroup-BogPRRDq.js";import"./Box-DWnb8VZB.js";import"./Divider-jUONNV4j.js";import"./dividerClasses-BmOcEkDu.js";import"./Stack-BcsM4Vc0.js";import"./styled-vBjI3IQc.js";import"./useThemeProps-BIK-1DKm.js";import"./Tooltip-CiiaKkqp.js";import"./IconButton-DSb4EJl9.js";import"./CircularProgress-D8w9ZPs6.js";import"./Button-BfU-Fa8o.js";import"./LoadingButton-ChfkXAvD.js";import"./Grid2-y9MPRr2u.js";import"./isMuiElement-DAzOCCHH.js";import"./Container-Cqq8qXXg.js";const l=({name:n,required:r,maxLength:i,minLength:t,max:a,min:f,pattern:h,validate:y,defaultValue:b,disabled:g,onChange:V,onBlur:v,value:T,shouldUnregister:u,deps:q,...x})=>e.jsx(w,{name:n,defaultValue:b,disabled:g,rules:{required:r,maxLength:i,minLength:t,max:a,min:f,pattern:h,validate:y,onChange:V,onBlur:v,value:T,shouldUnregister:u,deps:q},shouldUnregister:u,render:({field:I,fieldState:{error:S}})=>e.jsx(C,{...x,...I,error:!!S,required:typeof r=="object"?r.value:!!r})});try{l.displayName="ControlledInput",l.__docgenInfo={description:"",displayName:"ControlledInput",props:{color:{defaultValue:null,description:`The color of the component.
It supports both default and custom theme colors, which can be added as shown in the
[palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
The prop defaults to the value (\`'primary'\`) inherited from the parent FormControl component.`,name:"color",required:!1,type:{name:'OverridableStringUnion<"success" | "info" | "warning" | "error" | "primary" | "secondary", InputBasePropsColorOverrides>'}},classes:{defaultValue:null,description:"Override or extend the styles applied to the component.",name:"classes",required:!1,type:{name:"Partial<OutlinedInputClasses>"}},sx:{defaultValue:null,description:"The system prop that allows defining system overrides as well as additional CSS styles.",name:"sx",required:!1,type:{name:"SxProps<Theme>"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<unknown>"}},label:{defaultValue:null,description:"The label of the `input`. It is only used for layout. The actual labelling\nis handled by `InputLabel`.",name:"label",required:!1,type:{name:"ReactNode"}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"any"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},"aria-describedby":{defaultValue:null,description:"Identifies the element (or elements) that describes the object.",name:"aria-describedby",required:!1,type:{name:"string"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onBlur:{defaultValue:null,description:"Callback fired when the `input` is blurred.\n\nNotice that the first argument (event) might be undefined.",name:"onBlur",required:!1,type:{name:"FocusEventHandler<HTMLInputElement | HTMLTextAreaElement> & ((event: any) => void)"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.\n@param event The event source of the callback.\nYou can pull out the new value by accessing `event.target.value` (string).",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement> & ((event: any) => void)"}},onInvalid:{defaultValue:null,description:"Callback fired when the `input` doesn't satisfy its constraints.",name:"onInvalid",required:!1,type:{name:"FormEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyDown:{defaultValue:null,description:"",name:"onKeyDown",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},onKeyUp:{defaultValue:null,description:"",name:"onKeyUp",required:!1,type:{name:"KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement>"}},margin:{defaultValue:null,description:"If `dense`, will adjust vertical spacing. This is normally obtained via context from\nFormControl.\nThe prop defaults to the value (`'none'`) inherited from the parent FormControl component.",name:"margin",required:!1,type:{name:'"none" | "dense"'}},disabled:{defaultValue:null,description:"If `true`, the component is disabled.\nThe prop defaults to the value (`false`) inherited from the parent FormControl component.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"The size of the component.",name:"size",required:!1,type:{name:'OverridableStringUnion<"small" | "medium", InputBasePropsSizeOverrides>'}},type:{defaultValue:{value:"'text'"},description:"Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).",name:"type",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"any"}},fullWidth:{defaultValue:{value:"false"},description:"If `true`, the `input` will take up the full width of its container.",name:"fullWidth",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of the field
(not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}},autoComplete:{defaultValue:null,description:`This prop helps users to fill forms faster, especially on mobile devices.
The name can be confusing, as it's more like an autofill.
You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).`,name:"autoComplete",required:!1,type:{name:"string"}},inputProps:{defaultValue:{value:"{}"},description:"[Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputBaseComponentProps"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"Ref<any>"}},multiline:{defaultValue:{value:"false"},description:"If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.",name:"multiline",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},rows:{defaultValue:null,description:"Number of rows to display when multiline option is set to true.",name:"rows",required:!1,type:{name:"string | number"}},maxRows:{defaultValue:null,description:"Maximum number of rows to display when multiline option is set to true.",name:"maxRows",required:!1,type:{name:"string | number"}},minRows:{defaultValue:null,description:"Minimum number of rows to display when multiline option is set to true.",name:"minRows",required:!1,type:{name:"string | number"}},disableInjectingGlobalStyles:{defaultValue:{value:"false"},description:"If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.\nThis option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.",name:"disableInjectingGlobalStyles",required:!1,type:{name:"boolean"}},endAdornment:{defaultValue:null,description:"End `InputAdornment` for this component.",name:"endAdornment",required:!1,type:{name:"ReactNode"}},inputComponent:{defaultValue:{value:"'input'"},description:"The component used for the `input` element.\nEither a string to use a HTML element or a component.",name:"inputComponent",required:!1,type:{name:"ElementType<InputBaseComponentProps, keyof IntrinsicElements>"}},renderSuffix:{defaultValue:null,description:"",name:"renderSuffix",required:!1,type:{name:'(state: { disabled?: boolean; error?: boolean; filled?: boolean; focused?: boolean; margin?: "none" | "normal" | "dense"; required?: boolean; startAdornment?: ReactNode; }) => ReactNode'}},startAdornment:{defaultValue:null,description:"Start `InputAdornment` for this component.",name:"startAdornment",required:!1,type:{name:"ReactNode"}},pattern:{defaultValue:null,description:"",name:"pattern",required:!1,type:{name:"ValidationRule<RegExp>"}},max:{defaultValue:null,description:"",name:"max",required:!1,type:{name:"ValidationRule<string | number>"}},min:{defaultValue:null,description:"",name:"min",required:!1,type:{name:"ValidationRule<string | number>"}},required:{defaultValue:null,description:"",name:"required",required:!1,type:{name:"string | ValidationRule<boolean>"}},maxLength:{defaultValue:null,description:"",name:"maxLength",required:!1,type:{name:"ValidationRule<number>"}},minLength:{defaultValue:null,description:"",name:"minLength",required:!1,type:{name:"ValidationRule<number>"}},validate:{defaultValue:null,description:"",name:"validate",required:!1,type:{name:"Validate<any, FieldValues> | Record<string, Validate<any, FieldValues>>"}},shouldUnregister:{defaultValue:null,description:"",name:"shouldUnregister",required:!1,type:{name:"boolean"}},deps:{defaultValue:null,description:"",name:"deps",required:!1,type:{name:"string | string[]"}},name:{defaultValue:null,description:"",name:"name",required:!0,type:{name:"string"}}}}}catch{}const lt={title:"Form Components/Controlled Form/ControlledInput",component:l,tags:["autodocs"]},o={render:n=>{const r=()=>{const{getValues:t,formState:{isSubmitSuccessful:a}}=s();return a?e.jsxs(L,{sx:{padding:"1.5rem",marginTop:"1.5rem"},children:[e.jsx(R,{variant:"h2",children:"Submitted Values"}),e.jsx("pre",{children:JSON.stringify(t(),null,2)})]}):null},i=()=>{const{reset:t,formState:{isSubmitSuccessful:a}}=s();return e.jsxs(j,{container:!0,direction:"row",justifyContent:"space-between",marginTop:1,children:[e.jsx(m,{disabled:!a,children:"Reset",color:"secondary",onClick:()=>t({[n.name]:""})}),e.jsx(m,{type:"submit",disabled:a,children:"Submit"})]})};return e.jsxs(E,{values:{[n.name]:""},onSubmit:t=>t,children:[e.jsx(l,{...n}),e.jsx(i,{}),e.jsx(r,{})]})},args:{name:"controlledInput",required:!0,maxLength:{value:10,message:"Too long"},inputProps:{"aria-label":"Input Label"}}};var p,d,c;o.parameters={...o.parameters,docs:{...(p=o.parameters)==null?void 0:p.docs,source:{originalSource:`{
  render: (args: ControlledInputProps) => {
    const SubmittedValues = () => {
      const {
        getValues,
        formState: {
          isSubmitSuccessful
        }
      } = useFormContext();
      return isSubmitSuccessful ? <Paper sx={{
        padding: '1.5rem',
        marginTop: '1.5rem'
      }}>
          <Typography variant="h2">Submitted Values</Typography>
          <pre>{JSON.stringify(getValues(), null, 2)}</pre>
        </Paper> : null;
    };
    const Actions = () => {
      const {
        reset,
        formState: {
          isSubmitSuccessful
        }
      } = useFormContext();
      return <Grid container direction="row" justifyContent="space-between" marginTop={1}>
          <Button disabled={!isSubmitSuccessful} children="Reset" color="secondary" onClick={() => reset({
          [args.name]: ''
        })} />
          <Button type="submit" disabled={isSubmitSuccessful} children="Submit" />
        </Grid>;
    };
    return <ControlledForm values={{
      [args.name]: ''
    }} onSubmit={data => data}>
        <ControlledInput {...args} />
        <Actions />
        <SubmittedValues />
      </ControlledForm>;
  },
  args: {
    name: 'controlledInput',
    required: true,
    maxLength: {
      value: 10,
      message: 'Too long'
    },
    inputProps: {
      'aria-label': 'Input Label'
    }
  }
}`,...(c=(d=o.parameters)==null?void 0:d.docs)==null?void 0:c.source}}};const it=["_ControlledInput"];export{o as _ControlledInput,it as __namedExportsOrder,lt as default};
