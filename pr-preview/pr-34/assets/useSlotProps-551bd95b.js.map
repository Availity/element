{"version":3,"file":"useSlotProps-551bd95b.js","sources":["../../../node_modules/@mui/base/utils/isHostComponent.js","../../../node_modules/@mui/base/utils/appendOwnerState.js","../../../node_modules/@mui/base/utils/extractEventHandlers.js","../../../node_modules/@mui/base/utils/resolveComponentProps.js","../../../node_modules/@mui/base/utils/omitEventHandlers.js","../../../node_modules/@mui/base/utils/mergeSlotProps.js","../../../node_modules/@mui/base/utils/useSlotProps.js"],"sourcesContent":["/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nexport default function isHostComponent(element) {\n  return typeof element === 'string';\n}","import isHostComponent from './isHostComponent';\n\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\n\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nexport default function appendOwnerState(elementType, otherProps, ownerState) {\n  if (elementType === undefined || isHostComponent(elementType)) {\n    return otherProps;\n  }\n  return {\n    ...otherProps,\n    ownerState: {\n      ...otherProps.ownerState,\n      ...ownerState\n    }\n  };\n}","/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nexport default function extractEventHandlers(object, excludeKeys = []) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nexport default function resolveComponentProps(componentProps, ownerState) {\n  if (typeof componentProps === 'function') {\n    return componentProps(ownerState);\n  }\n  return componentProps;\n}","/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nexport default function omitEventHandlers(object) {\n  if (object === undefined) {\n    return {};\n  }\n  const result = {};\n  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {\n    result[prop] = object[prop];\n  });\n  return result;\n}","import clsx from 'clsx';\nimport extractEventHandlers from './extractEventHandlers';\nimport omitEventHandlers from './omitEventHandlers';\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nexport default function mergeSlotProps(parameters) {\n  const {\n    getSlotProps,\n    additionalProps,\n    externalSlotProps,\n    externalForwardedProps,\n    className\n  } = parameters;\n  if (!getSlotProps) {\n    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,\n    // so we can simply merge all the props without having to worry about extracting event handlers.\n    const joinedClasses = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);\n    const mergedStyle = {\n      ...(additionalProps == null ? void 0 : additionalProps.style),\n      ...(externalForwardedProps == null ? void 0 : externalForwardedProps.style),\n      ...(externalSlotProps == null ? void 0 : externalSlotProps.style)\n    };\n    const props = {\n      ...additionalProps,\n      ...externalForwardedProps,\n      ...externalSlotProps\n    };\n    if (joinedClasses.length > 0) {\n      props.className = joinedClasses;\n    }\n    if (Object.keys(mergedStyle).length > 0) {\n      props.style = mergedStyle;\n    }\n    return {\n      props,\n      internalRef: undefined\n    };\n  }\n\n  // In this case, getSlotProps is responsible for calling the external event handlers.\n  // We don't need to include them in the merged props because of this.\n\n  const eventHandlers = extractEventHandlers({\n    ...externalForwardedProps,\n    ...externalSlotProps\n  });\n  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);\n  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);\n  const internalSlotProps = getSlotProps(eventHandlers);\n\n  // The order of classes is important here.\n  // Emotion (that we use in libraries consuming Base UI) depends on this order\n  // to properly override style. It requires the most important classes to be last\n  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.\n  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);\n  const mergedStyle = {\n    ...(internalSlotProps == null ? void 0 : internalSlotProps.style),\n    ...(additionalProps == null ? void 0 : additionalProps.style),\n    ...(externalForwardedProps == null ? void 0 : externalForwardedProps.style),\n    ...(externalSlotProps == null ? void 0 : externalSlotProps.style)\n  };\n  const props = {\n    ...internalSlotProps,\n    ...additionalProps,\n    ...otherPropsWithoutEventHandlers,\n    ...componentsPropsWithoutEventHandlers\n  };\n  if (joinedClasses.length > 0) {\n    props.className = joinedClasses;\n  }\n  if (Object.keys(mergedStyle).length > 0) {\n    props.style = mergedStyle;\n  }\n  return {\n    props,\n    internalRef: internalSlotProps.ref\n  };\n}","import { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport appendOwnerState from './appendOwnerState';\nimport mergeSlotProps from './mergeSlotProps';\nimport resolveComponentProps from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport default function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    ...rest\n  } = parameters;\n  const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps({\n    ...rest,\n    externalSlotProps: resolvedComponentsProps\n  });\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, {\n    ...mergedProps,\n    ref\n  }, ownerState);\n  return props;\n}"],"names":["isHostComponent","element","appendOwnerState","elementType","otherProps","ownerState","extractEventHandlers","object","excludeKeys","result","prop","resolveComponentProps","componentProps","omitEventHandlers","mergeSlotProps","parameters","getSlotProps","additionalProps","externalSlotProps","externalForwardedProps","className","joinedClasses","clsx","mergedStyle","props","eventHandlers","componentsPropsWithoutEventHandlers","otherPropsWithoutEventHandlers","internalSlotProps","useSlotProps","_parameters$additiona","rest","resolvedComponentsProps","mergedProps","internalRef","ref","useForkRef"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}