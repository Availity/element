import{j as r}from"./jsx-runtime-BTJTZTIL.js";import"./FieldHelpIcon-C_RQexU-.js";import{F}from"./FormLabel-CPOZdgkC.js";import{F as o}from"./Switch-Bo5kkSM2.js";import{I as f}from"./Input-COUqH-9J.js";import"./index-DSF7aQ5o.js";import{F as T}from"./FormControl-BpN01e6f.js";import"./index-ChsGqxH_.js";import"./index-DJKl12U0.js";import"./index-BAgvEqVW.js";import"./faCircleArrowRight-B14F5Piw.js";import"./index-BgYLq7fD.js";import"./_commonjsHelpers-D6-XlEtG.js";import"./faUser-D77uLSLS.js";import"./faSortDown-BIc1sKK4.js";import"./SvgIcon-CiBNlF9H.js";import"./generateUtilityClass-BeVSWKCg.js";import"./identifier-CudAVvBZ.js";import"./memoTheme-CpoNRPWX.js";import"./styled-CKuRQFSa.js";import"./DefaultPropsProvider-CWkNlXkE.js";import"./generateUtilityClasses-whvyra8-.js";import"./index-DnNfvsmq.js";import"./Tooltip-CIyLwlBA.js";import"./index-DyJdRKzS.js";import"./useTheme-Cx1wRXKO.js";import"./useTheme-Ib01SJ3a.js";import"./useSlot-1VRyIerd.js";import"./resolveComponentProps-CCNxqvxI.js";import"./useForkRef-Dz4aGlyk.js";import"./useTimeout-iC_34LsC.js";import"./useEnhancedEffect-j2zQLnYm.js";import"./useControlled-DxC1uCGX.js";import"./useId-DIK8ekB4.js";import"./getReactElementRef-Df0xbma2.js";import"./Portal-C2J4q3Ji.js";import"./utils-tFrEP9Vf.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./TransitionGroupContext-BKlA24Pm.js";import"./index-Bxu_udwM.js";import"./index-DdXvKv-Q.js";import"./ownerDocument-DW-IO8s5.js";import"./useSlotProps-BmqT0tgx.js";import"./isFocusVisible-B8k4qzLc.js";import"./IconButton-D_kG6RhR.js";import"./createSimplePaletteValueFilter-bm0fmN_7.js";import"./ButtonBase-D97P5WV0.js";import"./emotion-react.browser.esm-v7Jm8XFw.js";import"./CircularProgress-fcRSDrpN.js";import"./Button-yLAd6_L_.js";import"./LoadingButton-Cl76w144.js";import"./FormControlLabel-BzV1MzKU.js";import"./formControlState-Dq1zat_P.js";import"./useFormControl-t_-EwZHM.js";import"./Typography-COSof5sR.js";import"./index-DfraP8LW.js";import"./extendSxProp-BY7TjwKM.js";import"./Box-Dv31mJKI.js";import"./FormLabel-BDxB3zbH.js";import"./RadioGroup-CZeO-sCM.js";import"./SwitchBase-CYtmyT40.js";import"./createSvgIcon-BWWwXn7v.js";import"./createChainedFunction-BO_9K8Jh.js";import"./Select-IoH-6RCp.js";import"./Menu-GaZ6ImQN.js";import"./Popover-CQBNnNRW.js";import"./isHostComponent-DVu5iVWx.js";import"./ownerWindow-HkKU3E4x.js";import"./debounce-Be36O1Ab.js";import"./Paper-4P5FqKie.js";import"./Modal-CezAubrN.js";import"./Backdrop-TXxSV-j9.js";import"./Fade-BCUt9uX4.js";import"./List-eXGzl-Dz.js";import"./utils-DoM3o7-Q.js";import"./OutlinedInput-B93mfhOp.js";import"./Stack-qbqOHiMo.js";import"./styled-Dbr83ACF.js";import"./useThemeProps-Do5o_sjG.js";import"./Divider-DJW73rZ3.js";import"./dividerClasses-0g4QmK6Y.js";import"./faCheck-BUdkY9Qv.js";import"./Switch-CyD42d4W.js";import"./index-CQspzllj.js";import"./Grid2-JMPt1-k0.js";import"./isMuiElement-DiOAsJE6.js";import"./Container-DVbvSSVb.js";const Yr={title:"Form Components/FormUtils/FormHelperText",component:o,tags:["autodocs"],parameters:{docs:{description:{component:"Label component for use with individual inputs, form controls,  and form groups. For labels to use with `checkbox`/`radio` see `FormControlLabel`."}}}},t={render:u=>r.jsx(o,{...u}),args:{children:"This text is a child of FormHelperText"}},e={render:()=>r.jsxs(r.Fragment,{children:[r.jsx(o,{children:"Default"}),r.jsx(o,{error:!0,children:"Error"})]})},m={render:()=>r.jsxs(T,{error:!0,size:"small",children:[r.jsx(F,{htmlFor:"field-1",helpTopicId:"1234",children:"Example"}),r.jsx(f,{id:"field-1",defaultValue:"default value"}),r.jsx(o,{children:"Helper Text"})]})};var p,i,s;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  render: (args: FormHelperTextProps) => <FormHelperText {...args} />,
  args: {
    children: 'This text is a child of FormHelperText'
  }
}`,...(s=(i=t.parameters)==null?void 0:i.docs)==null?void 0:s.source}}};var a,l,n;e.parameters={...e.parameters,docs:{...(a=e.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: () => <>
      <FormHelperText>Default</FormHelperText>
      <FormHelperText error>Error</FormHelperText>
    </>
}`,...(n=(l=e.parameters)==null?void 0:l.docs)==null?void 0:n.source}}};var d,c,x;m.parameters={...m.parameters,docs:{...(d=m.parameters)==null?void 0:d.docs,source:{originalSource:`{
  render: () => <FormControl error size="small">
      <FormLabel htmlFor="field-1" helpTopicId="1234">
        Example
      </FormLabel>
      <Input id="field-1" defaultValue="default value" />
      <FormHelperText>Helper Text</FormHelperText>
    </FormControl>
}`,...(x=(c=m.parameters)==null?void 0:c.docs)==null?void 0:x.source}}};const Zr=["_FormHelperText","_States","_Controls"];export{m as _Controls,t as _FormHelperText,e as _States,Zr as __namedExportsOrder,Yr as default};
